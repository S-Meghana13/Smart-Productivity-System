{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/smart-productivity-tracker/frontend/src/components/admin/MonitorProductivity.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"../../styles/MonitorProductivity.css\"; // Optional: your own CSS styling\n\nconst MonitorProductivity = () => {\n  const [productivityData, setProductivityData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProductivityData = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/adminproductivity\");\n        setProductivityData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching productivity data\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProductivityData();\n  }, []);\n\n  return (\n    <div className=\"monitor-productivity\">\n      <h1>Monitor Productivity Trends</h1>\n      {loading ? (\n        <p>Loading productivity data...</p>\n      ) : productivityData.length === 0 ? (\n        <p>No productivity data available.</p>\n      ) : (\n        <div className=\"productivity-reports\">\n          {productivityData.map((data, index) => (\n            <div key={index} className=\"report-card\">\n              <h3>{data.userName}</h3>\n              <p><strong>Productivity Score:</strong> {data.productivityScore}%</p>\n              <p><strong>Time Spent:</strong> {data.timeSpent} hours</p>\n              <p><strong>Tasks Completed:</strong> {data.tasksCompleted}</p>\n              <p><strong>Last Login:</strong> {data.lastLogin}</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MonitorProductivity;\n*/\n\nconst MonitorProductivity = () => {\n  _s();\n  const [productivityData, setProductivityData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchProductivityData = async () => {\n      try {\n        // Update the endpoint path to match the backend route\n        const response = await axios.get(\"http://localhost:5000/api/admin/productivity/aggregated\");\n        setProductivityData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching productivity data\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProductivityData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"monitor-productivity\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Monitor Productivity Trends\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading productivity data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : productivityData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No productivity data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"productivity-reports\",\n      children: productivityData.map((data, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"report-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: data.userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Productivity Score:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 18\n          }, this), \" \", data.productivityScore, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(MonitorProductivity, \"CeWovw4Paq1wxqPGSgpPbsfhUjo=\");\n_c = MonitorProductivity;\nvar _c;\n$RefreshReg$(_c, \"MonitorProductivity\");","map":{"version":3,"names":["MonitorProductivity","_s","productivityData","setProductivityData","useState","loading","setLoading","useEffect","fetchProductivityData","response","axios","get","data","error","console","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","userName","productivityScore","_c","$RefreshReg$"],"sources":["/home/apiiit123/smart-productivity-tracker/frontend/src/components/admin/MonitorProductivity.jsx"],"sourcesContent":["/*import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"../../styles/MonitorProductivity.css\"; // Optional: your own CSS styling\n\nconst MonitorProductivity = () => {\n  const [productivityData, setProductivityData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProductivityData = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/adminproductivity\");\n        setProductivityData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching productivity data\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProductivityData();\n  }, []);\n\n  return (\n    <div className=\"monitor-productivity\">\n      <h1>Monitor Productivity Trends</h1>\n      {loading ? (\n        <p>Loading productivity data...</p>\n      ) : productivityData.length === 0 ? (\n        <p>No productivity data available.</p>\n      ) : (\n        <div className=\"productivity-reports\">\n          {productivityData.map((data, index) => (\n            <div key={index} className=\"report-card\">\n              <h3>{data.userName}</h3>\n              <p><strong>Productivity Score:</strong> {data.productivityScore}%</p>\n              <p><strong>Time Spent:</strong> {data.timeSpent} hours</p>\n              <p><strong>Tasks Completed:</strong> {data.tasksCompleted}</p>\n              <p><strong>Last Login:</strong> {data.lastLogin}</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MonitorProductivity;\n*/\n\nconst MonitorProductivity = () => {\n  const [productivityData, setProductivityData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProductivityData = async () => {\n      try {\n        // Update the endpoint path to match the backend route\n        const response = await axios.get(\"http://localhost:5000/api/admin/productivity/aggregated\");\n        setProductivityData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching productivity data\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProductivityData();\n  }, []);\n\n  return (\n    <div className=\"monitor-productivity\">\n      <h1>Monitor Productivity Trends</h1>\n      {loading ? (\n        <p>Loading productivity data...</p>\n      ) : productivityData.length === 0 ? (\n        <p>No productivity data available.</p>\n      ) : (\n        <div className=\"productivity-reports\">\n          {productivityData.map((data, index) => (\n            <div key={index} className=\"report-card\">\n              <h3>{data.userName}</h3>\n              <p><strong>Productivity Score:</strong> {data.productivityScore}%</p>\n              {/* Add relevant properties */}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC;EAE5CG,SAAS,CAAC,MAAM;IACd,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,yDAAyD,CAAC;QAC3FR,mBAAmB,CAACM,QAAQ,CAACG,IAAI,CAAC;MACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D,CAAC,SAAS;QACRP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDE,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEO,OAAA;IAAKC,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCF,OAAA;MAAAE,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnChB,OAAO,gBACNU,OAAA;MAAAE,QAAA,EAAG;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GACjCnB,gBAAgB,CAACoB,MAAM,KAAK,CAAC,gBAC/BP,OAAA;MAAAE,QAAA,EAAG;IAA+B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEtCN,OAAA;MAAKC,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAClCf,gBAAgB,CAACqB,GAAG,CAAC,CAACX,IAAI,EAAEY,KAAK,kBAChCT,OAAA;QAAiBC,SAAS,EAAC,aAAa;QAAAC,QAAA,gBACtCF,OAAA;UAAAE,QAAA,EAAKL,IAAI,CAACa;QAAQ;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBN,OAAA;UAAAE,QAAA,gBAAGF,OAAA;YAAAE,QAAA,EAAQ;UAAmB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACT,IAAI,CAACc,iBAAiB,EAAC,GAAC;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA,GAF7DG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CAxCID,mBAAmB;AAAA2B,EAAA,GAAnB3B,mBAAmB;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}