{"ast":null,"code":"// src/services/api.js\n/*import axios from 'axios';\nconst fetchAIInsights = async (token) => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/tasks/analytics/insights\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch AI insights\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error(\"Error in fetching AI insights:\", err);\n    throw err;\n  }\n};\n\n// Add this function to save goals and reminders\nexport const saveGoalAndReminder = async (taskId, goal, reminderDate) => {\n  try {\n    const response = await axios.post(`/tasks/${taskId}/goals`, { goal, reminderDate });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error saving goal and reminder:\", error);\n    throw error;\n  }\n};\n\n// Add this function to fetch procrastination insights\nexport const fetchProcrastinationInsights = async (taskId) => {\n  try {\n    const response = await axios.get(`/tasks/${taskId}/procrastination-insights`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching procrastination insights:\", error);\n    throw error;\n  }\n};\n\n\n//export { fetchAIInsights };\nexport { fetchAIInsights, saveGoalAndReminder, fetchProcrastinationInsights };*/\n\n// src/services/api.js\n// src/services/api.js\n//import axios from 'axios';\n\n// Function for fetching AI insights\n/*const fetchAIInsights = async (token) => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/tasks/analytics/insights\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch AI insights\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error(\"Error in fetching AI insights:\", err);\n    throw err;\n  }\n};\n\n\n\n\nconst saveGoalAndReminder = async (taskId, goalData, token) => {\n  try {\n    // Ensure taskId is not undefined\n    if (!taskId) {\n      throw new Error(\"Task ID is missing\");\n    }\n\n    // Using environment variable for the base URL\n    const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n    \n    const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/goal`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(goalData),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text() || 'Unknown error occurred';\n      console.error(\"Backend error response:\", errorText);\n      throw new Error(`Failed to save goal and reminder: ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log(\"Goal and Reminder saved successfully:\", data);\n\n    // Return a success message along with the data\n    return { success: true, message: \"Goal and Reminder saved successfully\", data };\n  } catch (err) {\n    console.error(\"Error saving goal and reminder:\", err.message || err);\n    throw new Error(`An error occurred while saving the goal and reminder: ${err.message || err}`);\n  }\n};\n\n\n//const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n\nexport const fetchGoalAndReminder = async (taskId, token) => {\n  try {\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n    const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/goal`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch goal and reminder\");\n    }\n\n    const data = await response.json();\n    console.log(\"Fetched Goal and Reminder:\", data);\n    return data;\n\n  } catch (error) {\n    console.error(\"Error fetching goal and reminder:\", error);\n    throw error;\n  }\n};\n\n\n// Exporting all functions in one statement\n//export { fetchAIInsights, saveGoalAndReminder , fetchGoalAndReminder};\n\n\nexport { fetchAIInsights, saveGoalAndReminder, fetchGoalAndReminder };\n*/\n\n// Fetch AI Insights\nconst fetchAIInsights = async token => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/tasks/analytics/insights\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch AI insights\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error(\"Error in fetching AI insights:\", err);\n    throw err;\n  }\n};\n\n// Save Goal and Reminder\nconst saveGoalAndReminder = async (taskId, goalData, token) => {\n  try {\n    if (!taskId) {\n      throw new Error(\"Task ID is missing\");\n    }\n    const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n    const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/goal`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(goalData)\n    });\n    if (!response.ok) {\n      const errorText = (await response.text()) || 'Unknown error occurred';\n      console.error(\"Backend error response:\", errorText);\n      throw new Error(`Failed to save goal and reminder: ${errorText}`);\n    }\n    const data = await response.json();\n    console.log(\"Goal and Reminder saved successfully:\", data);\n    return {\n      success: true,\n      message: \"Goal and Reminder saved successfully\",\n      data\n    };\n  } catch (err) {\n    console.error(\"Error saving goal and reminder:\", err.message || err);\n    throw new Error(`An error occurred while saving the goal and reminder: ${err.message || err}`);\n  }\n};\n\n// Fetch Goal and Reminder\nconst fetchGoalAndReminder = async (taskId, token) => {\n  try {\n    const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n    const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/goal`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch goal and reminder\");\n    }\n    const data = await response.json();\n    console.log(\"Fetched Goal and Reminder:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching goal and reminder:\", error);\n    throw error;\n  }\n};\n\n// Export all functions in one statement (only once)\nexport { fetchAIInsights, saveGoalAndReminder, fetchGoalAndReminder };","map":{"version":3,"names":["fetchAIInsights","token","response","fetch","method","headers","Authorization","ok","Error","data","json","err","console","error","saveGoalAndReminder","taskId","goalData","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","body","JSON","stringify","errorText","text","log","success","message","fetchGoalAndReminder"],"sources":["/home/apiiit123/smart-productivity-tracker/frontend/src/components/services/api.js"],"sourcesContent":["// src/services/api.js\n/*import axios from 'axios';\nconst fetchAIInsights = async (token) => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/tasks/analytics/insights\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch AI insights\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error(\"Error in fetching AI insights:\", err);\n    throw err;\n  }\n};\n\n// Add this function to save goals and reminders\nexport const saveGoalAndReminder = async (taskId, goal, reminderDate) => {\n  try {\n    const response = await axios.post(`/tasks/${taskId}/goals`, { goal, reminderDate });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error saving goal and reminder:\", error);\n    throw error;\n  }\n};\n\n// Add this function to fetch procrastination insights\nexport const fetchProcrastinationInsights = async (taskId) => {\n  try {\n    const response = await axios.get(`/tasks/${taskId}/procrastination-insights`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching procrastination insights:\", error);\n    throw error;\n  }\n};\n\n\n//export { fetchAIInsights };\nexport { fetchAIInsights, saveGoalAndReminder, fetchProcrastinationInsights };*/\n\n// src/services/api.js\n// src/services/api.js\n//import axios from 'axios';\n\n// Function for fetching AI insights\n/*const fetchAIInsights = async (token) => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/tasks/analytics/insights\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch AI insights\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error(\"Error in fetching AI insights:\", err);\n    throw err;\n  }\n};\n\n\n\n\nconst saveGoalAndReminder = async (taskId, goalData, token) => {\n  try {\n    // Ensure taskId is not undefined\n    if (!taskId) {\n      throw new Error(\"Task ID is missing\");\n    }\n\n    // Using environment variable for the base URL\n    const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n    \n    const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/goal`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(goalData),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text() || 'Unknown error occurred';\n      console.error(\"Backend error response:\", errorText);\n      throw new Error(`Failed to save goal and reminder: ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log(\"Goal and Reminder saved successfully:\", data);\n\n    // Return a success message along with the data\n    return { success: true, message: \"Goal and Reminder saved successfully\", data };\n  } catch (err) {\n    console.error(\"Error saving goal and reminder:\", err.message || err);\n    throw new Error(`An error occurred while saving the goal and reminder: ${err.message || err}`);\n  }\n};\n\n\n//const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n\nexport const fetchGoalAndReminder = async (taskId, token) => {\n  try {\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n    const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/goal`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch goal and reminder\");\n    }\n\n    const data = await response.json();\n    console.log(\"Fetched Goal and Reminder:\", data);\n    return data;\n\n  } catch (error) {\n    console.error(\"Error fetching goal and reminder:\", error);\n    throw error;\n  }\n};\n\n\n// Exporting all functions in one statement\n//export { fetchAIInsights, saveGoalAndReminder , fetchGoalAndReminder};\n\n\nexport { fetchAIInsights, saveGoalAndReminder, fetchGoalAndReminder };\n*/\n\n\n\n\n// Fetch AI Insights\nconst fetchAIInsights = async (token) => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/tasks/analytics/insights\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch AI insights\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error(\"Error in fetching AI insights:\", err);\n    throw err;\n  }\n};\n\n// Save Goal and Reminder\nconst saveGoalAndReminder = async (taskId, goalData, token) => {\n  try {\n    if (!taskId) {\n      throw new Error(\"Task ID is missing\");\n    }\n\n    const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n    \n    const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/goal`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(goalData),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text() || 'Unknown error occurred';\n      console.error(\"Backend error response:\", errorText);\n      throw new Error(`Failed to save goal and reminder: ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log(\"Goal and Reminder saved successfully:\", data);\n    return { success: true, message: \"Goal and Reminder saved successfully\", data };\n  } catch (err) {\n    console.error(\"Error saving goal and reminder:\", err.message || err);\n    throw new Error(`An error occurred while saving the goal and reminder: ${err.message || err}`);\n  }\n};\n\n// Fetch Goal and Reminder\nconst fetchGoalAndReminder = async (taskId, token) => {\n  try {\n    const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n    const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/goal`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch goal and reminder\");\n    }\n\n    const data = await response.json();\n    console.log(\"Fetched Goal and Reminder:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching goal and reminder:\", error);\n    throw error;\n  }\n};\n\n// Export all functions in one statement (only once)\nexport { fetchAIInsights, saveGoalAndReminder, fetchGoalAndReminder };\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}