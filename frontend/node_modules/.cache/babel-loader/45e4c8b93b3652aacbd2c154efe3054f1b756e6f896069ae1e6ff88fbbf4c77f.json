{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/smart-productivity-tracker/frontend/src/components/Dashboard/SetGoalsandReminders.jsx\",\n  _s = $RefreshSig$();\n// /*import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Line } from 'react-chartjs-2';\n// import { fetchProcrastinationInsights, saveGoalAndReminder } from \"../services/api\";\n// import { Chart as ChartJS, Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale } from 'chart.js';\n// ChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale);\n\n// const SetGoalsAndReminders = ({ token }) => {\n//   const { id: taskId } = useParams(); // ✅ get taskId from URL\n//   console.log('Task ID:', taskId); // Log to check if taskId is correctly fetched\n//   const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n//   const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n//   const [procrastinationData, setProcrastinationData] = useState(null);\n//   const [patterns, setPatterns] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch procrastination insights and productivity patterns from AI\n//     fetchProcrastinationInsights(token)\n//       .then(data => {\n//         setProcrastinationData(data.insights);\n//         setPatterns(data.patterns);\n//       })\n//       .catch(err => console.error('Error fetching insights:', err));\n//   }, [token]);\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     saveGoalAndReminder(taskId, { goal, reminder }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//       })\n//       .catch(err => console.error('Error saving goal and reminder:', err));\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const goalForm = (\n//     <div className=\"goal-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         value={goal.title}\n//         placeholder=\"Goal Title\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         value={goal.description}\n//         placeholder=\"Goal Description\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n//     </div>\n//   );\n\n//   const reminderForm = (\n//     <div className=\"reminder-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//         <option value=\"Custom\">Custom</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n//     </div>\n//   );\n\n//   const procrastinationAnalysis = (\n//     <div className=\"procrastination-analysis\">\n//       <h2 className=\"text-xl font-semibold\">Procrastination Detection</h2>\n//       {procrastinationData && (\n//         <div>\n//           <p>{procrastinationData.alerts}</p>\n//           <div className=\"productivity-chart\">\n//             <Line\n//               data={{\n//                 labels: procrastinationData.dates,\n//                 datasets: [{\n//                   label: 'Time Delayed in Task Completion (hrs)',\n//                   data: procrastinationData.delays,\n//                   borderColor: 'rgba(255, 99, 132, 0.2)',\n//                   backgroundColor: 'rgba(255, 99, 132, 0.5)',\n//                 }]\n//               }}\n//               options={{ responsive: true, plugins: { title: { display: true, text: 'Delays in Task Completion' }}}}\n//             />\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n\n//   const productivityPatterns = (\n//     <div className=\"productivity-patterns\">\n//       <h2 className=\"text-xl font-semibold\">Your Productivity Patterns</h2>\n//       <div>\n//         <ul>\n//           {patterns.map((pattern, idx) => (\n//             <li key={idx}>{pattern}</li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n//       {goalForm}\n//       {reminderForm}\n//       {procrastinationAnalysis}\n//       {productivityPatterns}\n//     </div>\n//   );\n// };\n\n// export default SetGoalsAndReminders;\n// */\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom'; // ✅ Import useParams at the top level\n// import { fetchProcrastinationInsights, saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const { id: taskId } = useParams(); // ✅ Extract taskId from URL params using useParams\n//   console.log('Task ID:', taskId); // Check taskId in console\n\n//   const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n//   const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n\n//   useEffect(() => {\n//     if (taskId) {\n//       // Logic if you need to fetch procrastination insights or something else\n//     } else {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [taskId, token]);\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     // Save the goal and reminder using the task ID\n//     saveGoalAndReminder(taskId, { goal, reminder }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//       })\n//       .catch(err => console.error('Error saving goal and reminder:', err));\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const goalForm = (\n//     <div className=\"goal-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         value={goal.title}\n//         placeholder=\"Goal Title\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         value={goal.description}\n//         placeholder=\"Goal Description\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n//     </div>\n//   );\n\n//   const reminderForm = (\n//     <div className=\"reminder-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//         <option value=\"Custom\">Custom</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n//       {goalForm}\n//       {reminderForm}\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\n\n/*import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom'; \nimport { saveGoalAndReminder } from \"../services/api\";\n\nconst SetGoalsandReminders = ({ token }) => {\n  const location = useLocation(); // Use location hook to get the full URL\n  const [taskId, setTaskId] = useState(null);\n\n  useEffect(() => {\n    // Extract taskId from the URL path\n    const pathSegments = location.pathname.split('/');\n    const idFromUrl = pathSegments[pathSegments.length - 2]; // Should be the taskId\n    setTaskId(idFromUrl);\n\n    console.log('Task ID:', idFromUrl); // Log the task ID to confirm\n\n    if (!idFromUrl) {\n      console.error(\"Task ID is missing from URL.\");\n    }\n  }, [location]);\n\n  const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n  const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n\n  const handleSaveGoalAndReminder = () => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n      return;\n    }\n\n    saveGoalAndReminder(taskId, { goal, reminder }, token)\n      .then(response => {\n        console.log(\"Goal and Reminder saved successfully:\", response);\n      })\n      .catch(err => console.error('Error saving goal and reminder:', err));\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    if (name in goal) {\n      setGoal({ ...goal, [name]: value });\n    } else {\n      setReminder({ ...reminder, [name]: value });\n    }\n  };\n\n  const goalForm = (\n    <div className=\"goal-form\">\n      <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n      <input\n        type=\"text\"\n        name=\"title\"\n        value={goal.title}\n        placeholder=\"Goal Title\"\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <textarea\n        name=\"description\"\n        value={goal.description}\n        placeholder=\"Goal Description\"\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <input\n        type=\"datetime-local\"\n        name=\"dueDate\"\n        value={goal.dueDate}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <select\n        name=\"priority\"\n        value={goal.priority}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Low\">Low</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"High\">High</option>\n      </select>\n      <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n    </div>\n  );\n\n  const reminderForm = (\n    <div className=\"reminder-form\">\n      <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n      <select\n        name=\"frequency\"\n        value={reminder.frequency}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Daily\">Daily</option>\n        <option value=\"Weekly\">Weekly</option>\n        <option value=\"Custom\">Custom</option>\n      </select>\n      <input\n        type=\"time\"\n        name=\"time\"\n        value={reminder.time}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n    </div>\n  );\n\n  return (\n    <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n      {goalForm}\n      {reminderForm}\n    </div>\n  );\n};\n\nexport default SetGoalsandReminders;*/\n\n// import React, { useState, useEffect } from 'react';\n// import { useLocation } from 'react-router-dom'; \n// import { saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const location = useLocation();\n//   const [taskId, setTaskId] = useState(null);\n\n//   useEffect(() => {\n//     const pathSegments = location.pathname.split('/');\n//     const idFromUrl = pathSegments[pathSegments.length - 2]; // Get task ID\n//     setTaskId(idFromUrl);\n\n//     if (!idFromUrl) {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [location]);\n\n//   const [goal, setGoal] = useState({\n//     title: \"\",\n//     description: \"\",\n//     dueDate: \"\",\n//     priority: \"Medium\"\n//   });\n\n//   const [reminder, setReminder] = useState({\n//     frequency: \"Daily\",\n//     time: \"09:00\"\n//   });\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else if (name in reminder) {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     const combinedReminderDateTime = new Date(`${goal.dueDate}T${reminder.time}`);\n\n//     saveGoalAndReminder(taskId, {\n//       goal: `${goal.title} - ${goal.description}`,\n//       reminder: combinedReminderDateTime\n//     }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//         alert(\"Goal and Reminder saved successfully!\");\n//       })\n//       .catch(err => {\n//         console.error('Error saving goal and reminder:', err);\n//         alert(\"Failed to save. Check console.\");\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Set Goal and Reminder</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         placeholder=\"Goal Title\"\n//         value={goal.title}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <textarea\n//         name=\"description\"\n//         placeholder=\"Goal Description\"\n//         value={goal.description}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <input\n//         type=\"date\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <select name=\"priority\" value={goal.priority} onChange={handleInputChange}>\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select><br />\n\n//       <label>Reminder Time: </label>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <button onClick={handleSaveGoalAndReminder}>Save Goal & Reminder</button>\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { saveGoalAndReminder } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SetGoalsandReminders = ({\n  token\n}) => {\n  _s();\n  const {\n    id: taskId\n  } = useParams(); // Rename 'id' to 'taskId' locally\n  // Get taskId directly from URL\n  console.log('Task ID:', taskId);\n  useEffect(() => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n    }\n  }, [taskId]);\n  const [goal, setGoal] = useState({\n    title: \"\",\n    description: \"\",\n    dueDate: \"\",\n    priority: \"Medium\"\n  });\n  const [reminder, setReminder] = useState({\n    frequency: \"Daily\",\n    time: \"09:00\"\n  });\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name in goal) {\n      setGoal({\n        ...goal,\n        [name]: value\n      });\n    } else if (name in reminder) {\n      setReminder({\n        ...reminder,\n        [name]: value\n      });\n    }\n  };\n  const handleSaveGoalAndReminder = () => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n      return;\n    }\n\n    // Basic validation for required fields\n    if (!goal.title || !goal.description || !goal.dueDate) {\n      alert(\"Please fill in all goal fields.\");\n      return;\n    }\n    const combinedReminderDateTime = new Date(`${goal.dueDate}T${reminder.time}`);\n    saveGoalAndReminder(taskId, {\n      goal: `${goal.title} - ${goal.description}`,\n      reminder: combinedReminderDateTime\n    }, token).then(response => {\n      console.log(\"Goal and Reminder saved successfully:\", response);\n      alert(\"Goal and Reminder saved successfully!\");\n    }).catch(err => {\n      console.error('Error saving goal and reminder:', err);\n      alert(\"Failed to save. Check console.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Set Goal and Reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"title\",\n      placeholder: \"Goal Title\",\n      value: goal.title,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"description\",\n      placeholder: \"Goal Description\",\n      value: goal.description,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      name: \"dueDate\",\n      value: goal.dueDate,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"priority\",\n      value: goal.priority,\n      onChange: handleInputChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Low\",\n        children: \"Low\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Medium\",\n        children: \"Medium\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"High\",\n        children: \"High\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Reminder Time: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      name: \"time\",\n      value: reminder.time,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveGoalAndReminder,\n      children: \"Save Goal & Reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 571,\n    columnNumber: 5\n  }, this);\n};\n_s(SetGoalsandReminders, \"m5sMrZt0sBLz6hsiuSMr/xzKnD4=\", false, function () {\n  return [useParams];\n});\n_c = SetGoalsandReminders;\nexport default SetGoalsandReminders;\nvar _c;\n$RefreshReg$(_c, \"SetGoalsandReminders\");","map":{"version":3,"names":["React","useState","useEffect","useParams","saveGoalAndReminder","jsxDEV","_jsxDEV","SetGoalsandReminders","token","_s","id","taskId","console","log","error","goal","setGoal","title","description","dueDate","priority","reminder","setReminder","frequency","time","handleInputChange","e","name","value","target","handleSaveGoalAndReminder","alert","combinedReminderDateTime","Date","then","response","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/home/apiiit123/smart-productivity-tracker/frontend/src/components/Dashboard/SetGoalsandReminders.jsx"],"sourcesContent":["// /*import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Line } from 'react-chartjs-2';\n// import { fetchProcrastinationInsights, saveGoalAndReminder } from \"../services/api\";\n// import { Chart as ChartJS, Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale } from 'chart.js';\n// ChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale);\n\n// const SetGoalsAndReminders = ({ token }) => {\n//   const { id: taskId } = useParams(); // ✅ get taskId from URL\n//   console.log('Task ID:', taskId); // Log to check if taskId is correctly fetched\n//   const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n//   const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n//   const [procrastinationData, setProcrastinationData] = useState(null);\n//   const [patterns, setPatterns] = useState([]);\n  \n//   useEffect(() => {\n//     // Fetch procrastination insights and productivity patterns from AI\n//     fetchProcrastinationInsights(token)\n//       .then(data => {\n//         setProcrastinationData(data.insights);\n//         setPatterns(data.patterns);\n//       })\n//       .catch(err => console.error('Error fetching insights:', err));\n//   }, [token]);\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n  \n//     saveGoalAndReminder(taskId, { goal, reminder }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//       })\n//       .catch(err => console.error('Error saving goal and reminder:', err));\n//   };\n  \n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const goalForm = (\n//     <div className=\"goal-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         value={goal.title}\n//         placeholder=\"Goal Title\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         value={goal.description}\n//         placeholder=\"Goal Description\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n//     </div>\n//   );\n\n//   const reminderForm = (\n//     <div className=\"reminder-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//         <option value=\"Custom\">Custom</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n//     </div>\n//   );\n\n//   const procrastinationAnalysis = (\n//     <div className=\"procrastination-analysis\">\n//       <h2 className=\"text-xl font-semibold\">Procrastination Detection</h2>\n//       {procrastinationData && (\n//         <div>\n//           <p>{procrastinationData.alerts}</p>\n//           <div className=\"productivity-chart\">\n//             <Line\n//               data={{\n//                 labels: procrastinationData.dates,\n//                 datasets: [{\n//                   label: 'Time Delayed in Task Completion (hrs)',\n//                   data: procrastinationData.delays,\n//                   borderColor: 'rgba(255, 99, 132, 0.2)',\n//                   backgroundColor: 'rgba(255, 99, 132, 0.5)',\n//                 }]\n//               }}\n//               options={{ responsive: true, plugins: { title: { display: true, text: 'Delays in Task Completion' }}}}\n//             />\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n\n//   const productivityPatterns = (\n//     <div className=\"productivity-patterns\">\n//       <h2 className=\"text-xl font-semibold\">Your Productivity Patterns</h2>\n//       <div>\n//         <ul>\n//           {patterns.map((pattern, idx) => (\n//             <li key={idx}>{pattern}</li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n//       {goalForm}\n//       {reminderForm}\n//       {procrastinationAnalysis}\n//       {productivityPatterns}\n//     </div>\n//   );\n// };\n\n// export default SetGoalsAndReminders;\n// */\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom'; // ✅ Import useParams at the top level\n// import { fetchProcrastinationInsights, saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const { id: taskId } = useParams(); // ✅ Extract taskId from URL params using useParams\n//   console.log('Task ID:', taskId); // Check taskId in console\n  \n//   const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n//   const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n\n//   useEffect(() => {\n//     if (taskId) {\n//       // Logic if you need to fetch procrastination insights or something else\n//     } else {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [taskId, token]);\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     // Save the goal and reminder using the task ID\n//     saveGoalAndReminder(taskId, { goal, reminder }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//       })\n//       .catch(err => console.error('Error saving goal and reminder:', err));\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const goalForm = (\n//     <div className=\"goal-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         value={goal.title}\n//         placeholder=\"Goal Title\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         value={goal.description}\n//         placeholder=\"Goal Description\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n//     </div>\n//   );\n\n//   const reminderForm = (\n//     <div className=\"reminder-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//         <option value=\"Custom\">Custom</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n//       {goalForm}\n//       {reminderForm}\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\n\n/*import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom'; \nimport { saveGoalAndReminder } from \"../services/api\";\n\nconst SetGoalsandReminders = ({ token }) => {\n  const location = useLocation(); // Use location hook to get the full URL\n  const [taskId, setTaskId] = useState(null);\n\n  useEffect(() => {\n    // Extract taskId from the URL path\n    const pathSegments = location.pathname.split('/');\n    const idFromUrl = pathSegments[pathSegments.length - 2]; // Should be the taskId\n    setTaskId(idFromUrl);\n\n    console.log('Task ID:', idFromUrl); // Log the task ID to confirm\n\n    if (!idFromUrl) {\n      console.error(\"Task ID is missing from URL.\");\n    }\n  }, [location]);\n\n  const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n  const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n\n  const handleSaveGoalAndReminder = () => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n      return;\n    }\n\n    saveGoalAndReminder(taskId, { goal, reminder }, token)\n      .then(response => {\n        console.log(\"Goal and Reminder saved successfully:\", response);\n      })\n      .catch(err => console.error('Error saving goal and reminder:', err));\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    if (name in goal) {\n      setGoal({ ...goal, [name]: value });\n    } else {\n      setReminder({ ...reminder, [name]: value });\n    }\n  };\n\n  const goalForm = (\n    <div className=\"goal-form\">\n      <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n      <input\n        type=\"text\"\n        name=\"title\"\n        value={goal.title}\n        placeholder=\"Goal Title\"\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <textarea\n        name=\"description\"\n        value={goal.description}\n        placeholder=\"Goal Description\"\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <input\n        type=\"datetime-local\"\n        name=\"dueDate\"\n        value={goal.dueDate}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <select\n        name=\"priority\"\n        value={goal.priority}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Low\">Low</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"High\">High</option>\n      </select>\n      <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n    </div>\n  );\n\n  const reminderForm = (\n    <div className=\"reminder-form\">\n      <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n      <select\n        name=\"frequency\"\n        value={reminder.frequency}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Daily\">Daily</option>\n        <option value=\"Weekly\">Weekly</option>\n        <option value=\"Custom\">Custom</option>\n      </select>\n      <input\n        type=\"time\"\n        name=\"time\"\n        value={reminder.time}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n    </div>\n  );\n\n  return (\n    <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n      {goalForm}\n      {reminderForm}\n    </div>\n  );\n};\n\nexport default SetGoalsandReminders;*/\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useLocation } from 'react-router-dom'; \n// import { saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const location = useLocation();\n//   const [taskId, setTaskId] = useState(null);\n\n//   useEffect(() => {\n//     const pathSegments = location.pathname.split('/');\n//     const idFromUrl = pathSegments[pathSegments.length - 2]; // Get task ID\n//     setTaskId(idFromUrl);\n\n//     if (!idFromUrl) {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [location]);\n\n//   const [goal, setGoal] = useState({\n//     title: \"\",\n//     description: \"\",\n//     dueDate: \"\",\n//     priority: \"Medium\"\n//   });\n\n//   const [reminder, setReminder] = useState({\n//     frequency: \"Daily\",\n//     time: \"09:00\"\n//   });\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else if (name in reminder) {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     const combinedReminderDateTime = new Date(`${goal.dueDate}T${reminder.time}`);\n\n//     saveGoalAndReminder(taskId, {\n//       goal: `${goal.title} - ${goal.description}`,\n//       reminder: combinedReminderDateTime\n//     }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//         alert(\"Goal and Reminder saved successfully!\");\n//       })\n//       .catch(err => {\n//         console.error('Error saving goal and reminder:', err);\n//         alert(\"Failed to save. Check console.\");\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Set Goal and Reminder</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         placeholder=\"Goal Title\"\n//         value={goal.title}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <textarea\n//         name=\"description\"\n//         placeholder=\"Goal Description\"\n//         value={goal.description}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <input\n//         type=\"date\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <select name=\"priority\" value={goal.priority} onChange={handleInputChange}>\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select><br />\n\n//       <label>Reminder Time: </label>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <button onClick={handleSaveGoalAndReminder}>Save Goal & Reminder</button>\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { saveGoalAndReminder } from \"../services/api\";\n\nconst SetGoalsandReminders = ({ token }) => {\n  const { id: taskId } = useParams();  // Rename 'id' to 'taskId' locally\n  // Get taskId directly from URL\n  console.log('Task ID:', taskId); \n\n  useEffect(() => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n    }\n  }, [taskId]);\n\n  const [goal, setGoal] = useState({\n    title: \"\",\n    description: \"\",\n    dueDate: \"\",\n    priority: \"Medium\"\n  });\n\n  const [reminder, setReminder] = useState({\n    frequency: \"Daily\",\n    time: \"09:00\"\n  });\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    if (name in goal) {\n      setGoal({ ...goal, [name]: value });\n    } else if (name in reminder) {\n      setReminder({ ...reminder, [name]: value });\n    }\n  };\n\n  const handleSaveGoalAndReminder = () => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n      return;\n    }\n\n    // Basic validation for required fields\n    if (!goal.title || !goal.description || !goal.dueDate) {\n      alert(\"Please fill in all goal fields.\");\n      return;\n    }\n\n    const combinedReminderDateTime = new Date(`${goal.dueDate}T${reminder.time}`);\n\n    saveGoalAndReminder(taskId, {\n      goal: `${goal.title} - ${goal.description}`,\n      reminder: combinedReminderDateTime\n    }, token)\n      .then(response => {\n        console.log(\"Goal and Reminder saved successfully:\", response);\n        alert(\"Goal and Reminder saved successfully!\");\n      })\n      .catch(err => {\n        console.error('Error saving goal and reminder:', err);\n        alert(\"Failed to save. Check console.\");\n      });\n  };\n\n  return (\n    <div>\n      <h2>Set Goal and Reminder</h2>\n      <input\n        type=\"text\"\n        name=\"title\"\n        placeholder=\"Goal Title\"\n        value={goal.title}\n        onChange={handleInputChange}\n      /><br />\n\n      <textarea\n        name=\"description\"\n        placeholder=\"Goal Description\"\n        value={goal.description}\n        onChange={handleInputChange}\n      /><br />\n\n      <input\n        type=\"date\"\n        name=\"dueDate\"\n        value={goal.dueDate}\n        onChange={handleInputChange}\n      /><br />\n\n      <select name=\"priority\" value={goal.priority} onChange={handleInputChange}>\n        <option value=\"Low\">Low</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"High\">High</option>\n      </select><br />\n\n      <label>Reminder Time: </label>\n      <input\n        type=\"time\"\n        name=\"time\"\n        value={reminder.time}\n        onChange={handleInputChange}\n      /><br />\n\n      <button onClick={handleSaveGoalAndReminder}>Save Goal & Reminder</button>\n    </div>\n  );\n};\n\nexport default SetGoalsandReminders;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}