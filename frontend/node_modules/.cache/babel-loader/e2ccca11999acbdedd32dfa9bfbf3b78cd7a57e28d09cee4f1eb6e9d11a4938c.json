{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/smart-productivity-tracker/frontend/src/components/admin/GenerateReports.jsx\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport jsPDF from 'jspdf';\nimport { saveAs } from 'file-saver';\n\nconst GenerateReports = () => {\n  const [users, setUsers] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [dateRange, setDateRange] = useState({ start: '', end: '' });\n  const [selectedUser, setSelectedUser] = useState('');\n  const [reportData, setReportData] = useState([]);\n  \n  // Fetching users and tasks for report generation\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/admin/users').then((res) => {\n      setUsers(res.data);  // Assuming response contains user data\n    });\n\n    axios.get('http://localhost:5000/api/admin/tasks').then((res) => {\n      setTasks(res.data);  // Assuming response contains tasks data\n    });\n  }, []);\n\n  const handleGenerateReport = () => {\n    const filters = {\n      userId: selectedUser,\n      startDate: dateRange.start,\n      endDate: dateRange.end,\n    };\n\n    axios.post('http://localhost:5000/api/admin/generateReport', filters)\n      .then((res) => {\n        setReportData(res.data);\n      })\n      .catch((err) => {\n        console.error(\"Error generating report:\", err);\n      });\n  };\n\n  const handleDownloadPDF = () => {\n    const doc = new jsPDF();\n    doc.text('User Performance Report', 20, 20);\n    doc.autoTable({ html: '#report-table' });\n    doc.save('performance_report.pdf');\n  };\n\n  const handleDownloadCSV = () => {\n    const rows = reportData.map((row) => [\n      row.userName,\n      row.completedTasks,\n      row.pendingTasks,\n      row.performance,\n    ]);\n\n    const csvContent = 'data:text/csv;charset=utf-8,'\n      + ['UserName,Completed Tasks,Pending Tasks,Performance'].join(',') + '\\n'\n      + rows.map((row) => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, 'performance_report.csv');\n  };\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'User Name',\n      accessor: 'userName',\n    },\n    {\n      Header: 'Completed Tasks',\n      accessor: 'completedTasks',\n    },\n    {\n      Header: 'Pending Tasks',\n      accessor: 'pendingTasks',\n    },\n    {\n      Header: 'Performance',\n      accessor: 'performance',\n    },\n  ], []);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data: reportData });\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"text-2xl font-bold mb-4\">Generate Reports</h2>\n\n      <div className=\"filters\">\n        <label>User</label>\n        <select\n          value={selectedUser}\n          onChange={(e) => setSelectedUser(e.target.value)}\n        >\n          <option value=\"\">Select User</option>\n          {users.map((user) => (\n            <option key={user._id} value={user._id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        <label>Date Range</label>\n        <input\n          type=\"date\"\n          value={dateRange.start}\n          onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}\n        />\n        <input\n          type=\"date\"\n          value={dateRange.end}\n          onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}\n        />\n\n        <button\n          onClick={handleGenerateReport}\n          className=\"bg-blue-500 text-white p-2 rounded\"\n        >\n          Generate Report\n        </button>\n      </div>\n\n      <div className=\"report-table\">\n        <table {...getTableProps()} id=\"report-table\" className=\"min-w-full mt-6\">\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map(row => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <button\n          onClick={handleDownloadPDF}\n          className=\"bg-green-600 text-white p-2 rounded mt-4\"\n        >\n          Download as PDF\n        </button>\n\n        <button\n          onClick={handleDownloadCSV}\n          className=\"bg-green-600 text-white p-2 rounded mt-4 ml-4\"\n        >\n          Download as CSV\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GenerateReports;\n*/\n\n// frontend/src/pages/GenerateReports.jsx\n// src/pages/GenerateReports.jsx\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GenerateReports = () => {\n  _s();\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchReport = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:5000/api/admin/generate-report\");\n        setReportData(res.data);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Failed to fetch report:\", err);\n        setLoading(false);\n      }\n    };\n    fetchReport();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-center\",\n      children: \"Detailed User Performance Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-x-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"min-w-full border border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-100 text-left\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border\",\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border\",\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border\",\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border\",\n              children: \"Total Hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border\",\n              children: \"Task Count\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: reportData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"hover:bg-gray-50\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border\",\n              children: item.userName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border\",\n              children: item.category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border\",\n              children: item.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border\",\n              children: item.totalHours\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border\",\n              children: item.taskCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(GenerateReports, \"jCm3hbtGafXh2XJycWnxJk0zbwY=\");\n_c = GenerateReports;\nexport default GenerateReports;\nvar _c;\n$RefreshReg$(_c, \"GenerateReports\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","GenerateReports","_s","reportData","setReportData","loading","setLoading","fetchReport","res","get","data","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","userName","category","status","totalHours","taskCount","_c","$RefreshReg$"],"sources":["/home/apiiit123/smart-productivity-tracker/frontend/src/components/admin/GenerateReports.jsx"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport jsPDF from 'jspdf';\nimport { saveAs } from 'file-saver';\n\nconst GenerateReports = () => {\n  const [users, setUsers] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [dateRange, setDateRange] = useState({ start: '', end: '' });\n  const [selectedUser, setSelectedUser] = useState('');\n  const [reportData, setReportData] = useState([]);\n  \n  // Fetching users and tasks for report generation\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/admin/users').then((res) => {\n      setUsers(res.data);  // Assuming response contains user data\n    });\n\n    axios.get('http://localhost:5000/api/admin/tasks').then((res) => {\n      setTasks(res.data);  // Assuming response contains tasks data\n    });\n  }, []);\n\n  const handleGenerateReport = () => {\n    const filters = {\n      userId: selectedUser,\n      startDate: dateRange.start,\n      endDate: dateRange.end,\n    };\n\n    axios.post('http://localhost:5000/api/admin/generateReport', filters)\n      .then((res) => {\n        setReportData(res.data);\n      })\n      .catch((err) => {\n        console.error(\"Error generating report:\", err);\n      });\n  };\n\n  const handleDownloadPDF = () => {\n    const doc = new jsPDF();\n    doc.text('User Performance Report', 20, 20);\n    doc.autoTable({ html: '#report-table' });\n    doc.save('performance_report.pdf');\n  };\n\n  const handleDownloadCSV = () => {\n    const rows = reportData.map((row) => [\n      row.userName,\n      row.completedTasks,\n      row.pendingTasks,\n      row.performance,\n    ]);\n\n    const csvContent = 'data:text/csv;charset=utf-8,'\n      + ['UserName,Completed Tasks,Pending Tasks,Performance'].join(',') + '\\n'\n      + rows.map((row) => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, 'performance_report.csv');\n  };\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'User Name',\n      accessor: 'userName',\n    },\n    {\n      Header: 'Completed Tasks',\n      accessor: 'completedTasks',\n    },\n    {\n      Header: 'Pending Tasks',\n      accessor: 'pendingTasks',\n    },\n    {\n      Header: 'Performance',\n      accessor: 'performance',\n    },\n  ], []);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data: reportData });\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"text-2xl font-bold mb-4\">Generate Reports</h2>\n\n      <div className=\"filters\">\n        <label>User</label>\n        <select\n          value={selectedUser}\n          onChange={(e) => setSelectedUser(e.target.value)}\n        >\n          <option value=\"\">Select User</option>\n          {users.map((user) => (\n            <option key={user._id} value={user._id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        <label>Date Range</label>\n        <input\n          type=\"date\"\n          value={dateRange.start}\n          onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}\n        />\n        <input\n          type=\"date\"\n          value={dateRange.end}\n          onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}\n        />\n\n        <button\n          onClick={handleGenerateReport}\n          className=\"bg-blue-500 text-white p-2 rounded\"\n        >\n          Generate Report\n        </button>\n      </div>\n\n      <div className=\"report-table\">\n        <table {...getTableProps()} id=\"report-table\" className=\"min-w-full mt-6\">\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map(row => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <button\n          onClick={handleDownloadPDF}\n          className=\"bg-green-600 text-white p-2 rounded mt-4\"\n        >\n          Download as PDF\n        </button>\n\n        <button\n          onClick={handleDownloadCSV}\n          className=\"bg-green-600 text-white p-2 rounded mt-4 ml-4\"\n        >\n          Download as CSV\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GenerateReports;\n*/\n\n\n// frontend/src/pages/GenerateReports.jsx\n// src/pages/GenerateReports.jsx\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst GenerateReports = () => {\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchReport = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:5000/api/admin/generate-report\");\n        setReportData(res.data);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Failed to fetch report:\", err);\n        setLoading(false);\n      }\n    };\n\n    fetchReport();\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">Detailed User Performance Report</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full border border-gray-200\">\n            <thead>\n              <tr className=\"bg-gray-100 text-left\">\n                <th className=\"p-2 border\">Username</th>\n                <th className=\"p-2 border\">Category</th>\n                <th className=\"p-2 border\">Status</th>\n                <th className=\"p-2 border\">Total Hours</th>\n                <th className=\"p-2 border\">Task Count</th>\n              </tr>\n            </thead>\n            <tbody>\n              {reportData.map((item, index) => (\n                <tr key={index} className=\"hover:bg-gray-50\">\n                  <td className=\"p-2 border\">{item.userName}</td>\n                  <td className=\"p-2 border\">{item.category}</td>\n                  <td className=\"p-2 border\">{item.status}</td>\n                  <td className=\"p-2 border\">{item.totalHours}</td>\n                  <td className=\"p-2 border\">{item.taskCount}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GenerateReports;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}