{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/smart-productivity-tracker/frontend/src/components/admin/GenerateReports.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { useTable } from 'react-table';\n// import jsPDF from 'jspdf';\n// import { saveAs } from 'file-saver';\n// import '../../styles/GenerateReports.css';\n\n// const GenerateReports = () => {\n//   const [users, setUsers] = useState([]);\n//   const [tasks, setTasks] = useState([]);\n//   const [dateRange, setDateRange] = useState({ start: '', end: '' });\n//   const [selectedUser, setSelectedUser] = useState('');\n//   const [reportData, setReportData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   // Fetching users and tasks for report generation\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/admin/users').then((res) => {\n//       setUsers(res.data);  // Assuming response contains user data\n//     });\n\n//     axios.get('http://localhost:5000/api/admin/tasks').then((res) => {\n//       setTasks(res.data);  // Assuming response contains tasks data\n//     });\n//   }, []);\n\n//   const handleGenerateReport = () => {\n//     if (!selectedUser || !dateRange.start || !dateRange.end) {\n//       alert(\"Please select a user and date range\");\n//       return;\n//     }\n\n//     const filters = {\n//       userId: selectedUser,\n//       startDate: dateRange.start,\n//       endDate: dateRange.end,\n//     };\n\n//     setLoading(true);\n//     axios.post('http://localhost:5000/api/admin/generate-reports', filters)\n//       .then((res) => {\n//         setReportData(res.data);\n//         setLoading(false);\n//       })\n//       .catch((err) => {\n//         console.error(\"Error generating report:\", err);\n//         setLoading(false);\n//       });\n//   };\n\n//   const handleDownloadPDF = () => {\n//     const doc = new jsPDF();\n//     doc.text('User Performance Report', 20, 20);\n//     doc.autoTable({ html: '#report-table' });\n//     doc.save('performance_report.pdf');\n//   };\n\n//   const handleDownloadCSV = () => {\n//     const rows = reportData.map((row) => [\n//       row.userName,\n//       row.category,\n//       row.status,\n//       row.totalHours,\n//       row.taskCount,\n//     ]);\n\n//     const csvContent = 'data:text/csv;charset=utf-8,'\n//       + ['UserName,Category,Status,Total Hours,Task Count'].join(',') + '\\n'\n//       + rows.map((row) => row.join(',')).join('\\n');\n\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, 'performance_report.csv');\n//   };\n\n//   const columns = React.useMemo(() => [\n//     {\n//       Header: 'User Name',\n//       accessor: 'userName',\n//     },\n//     {\n//       Header: 'Category',\n//       accessor: 'category',\n//     },\n//     {\n//       Header: 'Status',\n//       accessor: 'status',\n//     },\n//     {\n//       Header: 'Total Hours',\n//       accessor: 'totalHours',\n//     },\n//     {\n//       Header: 'Task Count',\n//       accessor: 'taskCount',\n//     },\n//   ], []);\n\n//   const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data: reportData });\n\n//   return (\n//     <div className=\"container\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Generate Reports</h2>\n\n//       <div className=\"filters\">\n//         <label>User</label>\n//         <select\n//           value={selectedUser}\n//           onChange={(e) => setSelectedUser(e.target.value)}\n//         >\n//           <option value=\"\">Select User</option>\n//           {users.map((user) => (\n//             <option key={user._id} value={user._id}>\n//               {user.name}\n//             </option>\n//           ))}\n//         </select>\n\n//         <label>Date Range</label>\n//         <input\n//           type=\"date\"\n//           value={dateRange.start}\n//           onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}\n//         />\n//         <input\n//           type=\"date\"\n//           value={dateRange.end}\n//           onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}\n//         />\n\n//         <button\n//           onClick={handleGenerateReport}\n//           className=\"bg-blue-500 text-white p-2 rounded\"\n//           disabled={loading}\n//         >\n//           {loading ? 'Generating Report...' : 'Generate Report'}\n//         </button>\n//       </div>\n\n//       {loading ? (\n//         <div className=\"loading\">Loading...</div>\n//       ) : (\n//         <div className=\"report-table\">\n//           <table {...getTableProps()} id=\"report-table\" className=\"min-w-full mt-6\">\n//             <thead>\n//               {headerGroups.map(headerGroup => (\n//                 <tr {...headerGroup.getHeaderGroupProps()}>\n//                   {headerGroup.headers.map(column => (\n//                     <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n//                   ))}\n//                 </tr>\n//               ))}\n//             </thead>\n//             <tbody {...getTableBodyProps()}>\n//               {rows.map(row => {\n//                 prepareRow(row);\n//                 return (\n//                   <tr {...row.getRowProps()}>\n//                     {row.cells.map(cell => {\n//                       return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n//                     })}\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n\n//           <button\n//             onClick={handleDownloadPDF}\n//             className=\"bg-green-600 text-white p-2 rounded mt-4\"\n//           >\n//             Download as PDF\n//           </button>\n\n//           <button\n//             onClick={handleDownloadCSV}\n//             className=\"bg-green-600 text-white p-2 rounded mt-4 ml-4\"\n//           >\n//             Download as CSV\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default GenerateReports;\n\n/*\n// frontend/src/pages/GenerateReports.jsx\n// src/pages/GenerateReports.jsx\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst GenerateReports = () => {\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchReport = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:5000/api/admin/generate-report\");\n        setReportData(res.data);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Failed to fetch report:\", err);\n        setLoading(false);\n      }\n    };\n\n    fetchReport();\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">Detailed User Performance Report</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full border border-gray-200\">\n            <thead>\n              <tr className=\"bg-gray-100 text-left\">\n                <th className=\"p-2 border\">Username</th>\n                <th className=\"p-2 border\">Category</th>\n                <th className=\"p-2 border\">Status</th>\n                <th className=\"p-2 border\">Total Hours</th>\n                <th className=\"p-2 border\">Task Count</th>\n              </tr>\n            </thead>\n            <tbody>\n              {reportData.map((item, index) => (\n                <tr key={index} className=\"hover:bg-gray-50\">\n                  <td className=\"p-2 border\">{item.userName}</td>\n                  <td className=\"p-2 border\">{item.category}</td>\n                  <td className=\"p-2 border\">{item.status}</td>\n                  <td className=\"p-2 border\">{item.totalHours}</td>\n                  <td className=\"p-2 border\">{item.taskCount}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GenerateReports;\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport jsPDF from 'jspdf'; // âœ…\n\nimport 'jspdf-autotable';\nimport { saveAs } from 'file-saver';\nimport '../../styles/GenerateReports.css';\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GenerateReports = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [dateRange, setDateRange] = useState({\n    start: '',\n    end: ''\n  });\n  const [selectedUser, setSelectedUser] = useState('');\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetching users and tasks for report generation\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/admin/users').then(res => {\n      setUsers(res.data); // Assuming response contains user data\n    });\n    axios.get('http://localhost:5000/api/admin/tasks').then(res => {\n      setTasks(res.data); // Assuming response contains tasks data\n    });\n  }, []);\n  const handleGenerateReport = () => {\n    if (!selectedUser || !dateRange.start || !dateRange.end) {\n      alert(\"Please select a user and date range\");\n      return;\n    }\n    const filters = {\n      userId: selectedUser,\n      startDate: dateRange.start,\n      endDate: dateRange.end\n    };\n    setLoading(true);\n    axios.post('http://localhost:5000/api/admin/generate-reports', filters).then(res => {\n      setReportData(res.data);\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Error generating report:\", err);\n      setLoading(false);\n    });\n  };\n\n  // const handleDownloadPDF = () => {\n  //   const doc = new jsPDF();\n  //   doc.text('User Performance Report', 20, 20);\n  //   doc.autoTable({ html: '#report-table' });\n  //   doc.save('performance_report.pdf');\n  // };\n\n  const handleDownloadPDF = () => {\n    if (reportData.length === 0) {\n      alert(\"Please generate the report first.\");\n      return;\n    }\n    const doc = new jsPDF();\n    doc.text(\"Task Report\", 14, 10);\n    const tableColumn = [\"Task Title\", \"Status\", \"Date\"];\n    const tableRows = reportData.map(task => [task.title || \"N/A\", task.status || \"N/A\", new Date(task.date).toLocaleDateString() || \"N/A\"]);\n    doc.autoTable({\n      head: [tableColumn],\n      body: tableRows,\n      startY: 20\n    });\n    doc.save(\"task_report.pdf\");\n  };\n  const handleDownloadCSV = () => {\n    const rows = reportData.map(row => [row.userName, row.category, row.status, row.totalHours, row.taskCount]);\n    const csvContent = 'data:text/csv;charset=utf-8,' + ['UserName,Category,Status,Total Hours,Task Count'].join(',') + '\\n' + rows.map(row => row.join(',')).join('\\n');\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    saveAs(blob, 'performance_report.csv');\n  };\n  const columns = React.useMemo(() => [{\n    Header: 'User Name',\n    accessor: 'userName'\n  }, {\n    Header: 'Category',\n    accessor: 'category'\n  }, {\n    Header: 'Status',\n    accessor: 'status'\n  }, {\n    Header: 'Total Hours',\n    accessor: 'totalHours'\n  }, {\n    Header: 'Task Count',\n    accessor: 'taskCount'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data: reportData\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"generate-report-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Generate Reports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select User:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedUser,\n          onChange: e => setSelectedUser(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select a User --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: user._id,\n            children: user.fullname\n          }, user._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: dateRange.start,\n          onChange: e => setDateRange({\n            ...dateRange,\n            start: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: dateRange.end,\n          onChange: e => setDateRange({\n            ...dateRange,\n            end: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"style-button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGenerateReport,\n          children: \"Generate Report\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading report...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 19\n    }, this), reportData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"report-table-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Report Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"report-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"User Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Total Hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Task Count\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: reportData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.userName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.totalHours\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.taskCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"g-btn\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDownloadPDF,\n          disabled: reportData.length === 0,\n          children: \"Download PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"m-btn\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/admindashboard\",\n          className: \"dashboard-link\",\n          children: \"Go to Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 1\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 5\n  }, this);\n};\n_s(GenerateReports, \"8vR+y7nRZo5RKHT3AYAaK9TwiOA=\", false, function () {\n  return [useTable];\n});\n_c = GenerateReports;\nexport default GenerateReports;\nvar _c;\n$RefreshReg$(_c, \"GenerateReports\");","map":{"version":3,"names":["React","useState","useEffect","axios","useTable","jsPDF","saveAs","Link","jsxDEV","_jsxDEV","GenerateReports","_s","users","setUsers","tasks","setTasks","dateRange","setDateRange","start","end","selectedUser","setSelectedUser","reportData","setReportData","loading","setLoading","get","then","res","data","handleGenerateReport","alert","filters","userId","startDate","endDate","post","catch","err","console","error","handleDownloadPDF","length","doc","text","tableColumn","tableRows","map","task","title","status","Date","date","toLocaleDateString","autoTable","head","body","startY","save","handleDownloadCSV","rows","row","userName","category","totalHours","taskCount","csvContent","join","blob","Blob","type","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","prepareRow","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","user","_id","fullname","onClick","item","index","disabled","to","_c","$RefreshReg$"],"sources":["/home/apiiit123/smart-productivity-tracker/frontend/src/components/admin/GenerateReports.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { useTable } from 'react-table';\n// import jsPDF from 'jspdf';\n// import { saveAs } from 'file-saver';\n// import '../../styles/GenerateReports.css';\n\n// const GenerateReports = () => {\n//   const [users, setUsers] = useState([]);\n//   const [tasks, setTasks] = useState([]);\n//   const [dateRange, setDateRange] = useState({ start: '', end: '' });\n//   const [selectedUser, setSelectedUser] = useState('');\n//   const [reportData, setReportData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   // Fetching users and tasks for report generation\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/admin/users').then((res) => {\n//       setUsers(res.data);  // Assuming response contains user data\n//     });\n\n//     axios.get('http://localhost:5000/api/admin/tasks').then((res) => {\n//       setTasks(res.data);  // Assuming response contains tasks data\n//     });\n//   }, []);\n\n//   const handleGenerateReport = () => {\n//     if (!selectedUser || !dateRange.start || !dateRange.end) {\n//       alert(\"Please select a user and date range\");\n//       return;\n//     }\n\n//     const filters = {\n//       userId: selectedUser,\n//       startDate: dateRange.start,\n//       endDate: dateRange.end,\n//     };\n\n//     setLoading(true);\n//     axios.post('http://localhost:5000/api/admin/generate-reports', filters)\n//       .then((res) => {\n//         setReportData(res.data);\n//         setLoading(false);\n//       })\n//       .catch((err) => {\n//         console.error(\"Error generating report:\", err);\n//         setLoading(false);\n//       });\n//   };\n\n//   const handleDownloadPDF = () => {\n//     const doc = new jsPDF();\n//     doc.text('User Performance Report', 20, 20);\n//     doc.autoTable({ html: '#report-table' });\n//     doc.save('performance_report.pdf');\n//   };\n\n//   const handleDownloadCSV = () => {\n//     const rows = reportData.map((row) => [\n//       row.userName,\n//       row.category,\n//       row.status,\n//       row.totalHours,\n//       row.taskCount,\n//     ]);\n\n//     const csvContent = 'data:text/csv;charset=utf-8,'\n//       + ['UserName,Category,Status,Total Hours,Task Count'].join(',') + '\\n'\n//       + rows.map((row) => row.join(',')).join('\\n');\n\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, 'performance_report.csv');\n//   };\n\n//   const columns = React.useMemo(() => [\n//     {\n//       Header: 'User Name',\n//       accessor: 'userName',\n//     },\n//     {\n//       Header: 'Category',\n//       accessor: 'category',\n//     },\n//     {\n//       Header: 'Status',\n//       accessor: 'status',\n//     },\n//     {\n//       Header: 'Total Hours',\n//       accessor: 'totalHours',\n//     },\n//     {\n//       Header: 'Task Count',\n//       accessor: 'taskCount',\n//     },\n//   ], []);\n\n//   const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data: reportData });\n\n//   return (\n//     <div className=\"container\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Generate Reports</h2>\n\n//       <div className=\"filters\">\n//         <label>User</label>\n//         <select\n//           value={selectedUser}\n//           onChange={(e) => setSelectedUser(e.target.value)}\n//         >\n//           <option value=\"\">Select User</option>\n//           {users.map((user) => (\n//             <option key={user._id} value={user._id}>\n//               {user.name}\n//             </option>\n//           ))}\n//         </select>\n\n//         <label>Date Range</label>\n//         <input\n//           type=\"date\"\n//           value={dateRange.start}\n//           onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}\n//         />\n//         <input\n//           type=\"date\"\n//           value={dateRange.end}\n//           onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}\n//         />\n\n//         <button\n//           onClick={handleGenerateReport}\n//           className=\"bg-blue-500 text-white p-2 rounded\"\n//           disabled={loading}\n//         >\n//           {loading ? 'Generating Report...' : 'Generate Report'}\n//         </button>\n//       </div>\n\n//       {loading ? (\n//         <div className=\"loading\">Loading...</div>\n//       ) : (\n//         <div className=\"report-table\">\n//           <table {...getTableProps()} id=\"report-table\" className=\"min-w-full mt-6\">\n//             <thead>\n//               {headerGroups.map(headerGroup => (\n//                 <tr {...headerGroup.getHeaderGroupProps()}>\n//                   {headerGroup.headers.map(column => (\n//                     <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n//                   ))}\n//                 </tr>\n//               ))}\n//             </thead>\n//             <tbody {...getTableBodyProps()}>\n//               {rows.map(row => {\n//                 prepareRow(row);\n//                 return (\n//                   <tr {...row.getRowProps()}>\n//                     {row.cells.map(cell => {\n//                       return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n//                     })}\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n\n//           <button\n//             onClick={handleDownloadPDF}\n//             className=\"bg-green-600 text-white p-2 rounded mt-4\"\n//           >\n//             Download as PDF\n//           </button>\n\n//           <button\n//             onClick={handleDownloadCSV}\n//             className=\"bg-green-600 text-white p-2 rounded mt-4 ml-4\"\n//           >\n//             Download as CSV\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default GenerateReports;\n\n\n/*\n// frontend/src/pages/GenerateReports.jsx\n// src/pages/GenerateReports.jsx\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst GenerateReports = () => {\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchReport = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:5000/api/admin/generate-report\");\n        setReportData(res.data);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Failed to fetch report:\", err);\n        setLoading(false);\n      }\n    };\n\n    fetchReport();\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">Detailed User Performance Report</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full border border-gray-200\">\n            <thead>\n              <tr className=\"bg-gray-100 text-left\">\n                <th className=\"p-2 border\">Username</th>\n                <th className=\"p-2 border\">Category</th>\n                <th className=\"p-2 border\">Status</th>\n                <th className=\"p-2 border\">Total Hours</th>\n                <th className=\"p-2 border\">Task Count</th>\n              </tr>\n            </thead>\n            <tbody>\n              {reportData.map((item, index) => (\n                <tr key={index} className=\"hover:bg-gray-50\">\n                  <td className=\"p-2 border\">{item.userName}</td>\n                  <td className=\"p-2 border\">{item.category}</td>\n                  <td className=\"p-2 border\">{item.status}</td>\n                  <td className=\"p-2 border\">{item.totalHours}</td>\n                  <td className=\"p-2 border\">{item.taskCount}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GenerateReports;\n*/\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport jsPDF from 'jspdf'; // âœ…\n\nimport 'jspdf-autotable';\nimport { saveAs } from 'file-saver';\nimport '../../styles/GenerateReports.css';\nimport { Link } from \"react-router-dom\";\n\nconst GenerateReports = () => {\n  const [users, setUsers] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [dateRange, setDateRange] = useState({ start: '', end: '' });\n  const [selectedUser, setSelectedUser] = useState('');\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetching users and tasks for report generation\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/admin/users').then((res) => {\n      setUsers(res.data);  // Assuming response contains user data\n    });\n\n    axios.get('http://localhost:5000/api/admin/tasks').then((res) => {\n      setTasks(res.data);  // Assuming response contains tasks data\n    });\n  }, []);\n\n  const handleGenerateReport = () => {\n    if (!selectedUser || !dateRange.start || !dateRange.end) {\n      alert(\"Please select a user and date range\");\n      return;\n    }\n\n    const filters = {\n      userId: selectedUser,\n      startDate: dateRange.start,\n      endDate: dateRange.end,\n    };\n\n    setLoading(true);\n    axios.post('http://localhost:5000/api/admin/generate-reports', filters)\n      .then((res) => {\n        setReportData(res.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.error(\"Error generating report:\", err);\n        setLoading(false);\n      });\n  };\n\n  // const handleDownloadPDF = () => {\n  //   const doc = new jsPDF();\n  //   doc.text('User Performance Report', 20, 20);\n  //   doc.autoTable({ html: '#report-table' });\n  //   doc.save('performance_report.pdf');\n  // };\n\n  const handleDownloadPDF = () => {\n    if (reportData.length === 0) {\n      alert(\"Please generate the report first.\");\n      return;\n    }\n  \n    const doc = new jsPDF();\n    doc.text(\"Task Report\", 14, 10);\n  \n    const tableColumn = [\"Task Title\", \"Status\", \"Date\"];\n    const tableRows = reportData.map(task => [\n      task.title || \"N/A\",\n      task.status || \"N/A\",\n      new Date(task.date).toLocaleDateString() || \"N/A\"\n    ]);\n  \n    doc.autoTable({\n      head: [tableColumn],\n      body: tableRows,\n      startY: 20,\n    });\n  \n    doc.save(\"task_report.pdf\");\n  };\n  \n\n  const handleDownloadCSV = () => {\n    const rows = reportData.map((row) => [\n      row.userName,\n      row.category,\n      row.status,\n      row.totalHours,\n      row.taskCount,\n    ]);\n\n    const csvContent = 'data:text/csv;charset=utf-8,'\n      + ['UserName,Category,Status,Total Hours,Task Count'].join(',') + '\\n'\n      + rows.map((row) => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, 'performance_report.csv');\n  };\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'User Name',\n      accessor: 'userName',\n    },\n    {\n      Header: 'Category',\n      accessor: 'category',\n    },\n    {\n      Header: 'Status',\n      accessor: 'status',\n    },\n    {\n      Header: 'Total Hours',\n      accessor: 'totalHours',\n    },\n    {\n      Header: 'Task Count',\n      accessor: 'taskCount',\n    },\n  ], []);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data: reportData });\n\n  return (\n    <div className=\"generate-report-container\">\n      <h2>Generate Reports</h2>\n  \n      <div className=\"filters\">\n        <label>\n          Select User:\n          <select value={selectedUser} onChange={(e) => setSelectedUser(e.target.value)}>\n            <option value=\"\">-- Select a User --</option>\n            {users.map((user) => (\n              <option key={user._id} value={user._id}>\n                {user.fullname}\n              </option>\n            ))}\n          </select>\n        </label>\n  \n        <label>\n          Start Date:\n          <input\n            type=\"date\"\n            value={dateRange.start}\n            onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}\n          />\n        </label>\n  \n        <label>\n          End Date:\n          <input\n            type=\"date\"\n            value={dateRange.end}\n            onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}\n          />\n        </label>\n        <div className=\"style-button\">\n       <button onClick={handleGenerateReport}>Generate Report</button>\n        </div>\n      </div>\n  \n      {loading && <p>Loading report...</p>}\n  \n      {reportData.length > 0 && (\n        <div className=\"report-table-container\">\n           <h3>Report Results</h3>\n          <table className=\"report-table\">\n            <thead>\n              <tr>\n                <th>User Name</th>\n                <th>Category</th>\n                <th>Status</th>\n                <th>Total Hours</th>\n                <th>Task Count</th>\n              </tr>\n            </thead>\n            <tbody>\n              {reportData.map((item, index) => (\n                <tr key={index}>\n                  <td>{item.userName}</td>\n                  <td>{item.category}</td>\n                  <td>{item.status}</td>\n                  <td>{item.totalHours}</td>\n                  <td>{item.taskCount}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n              <div className='g-btn'>\n          <button onClick={handleDownloadPDF} disabled={reportData.length === 0}>Download PDF</button>\n          </div>\n          <div className=\"m-btn\">\n<Link to=\"/admindashboard\" className=\"dashboard-link\">\n  Go to Dashboard\n</Link>\n</div>\n\n        </div>\n      )}\n    </div>\n    \n    \n  );\n  \n};\n\nexport default GenerateReports;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}