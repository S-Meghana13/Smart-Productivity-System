{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/smart-productivity-tracker/frontend/src/components/Dashboard/TrackProductivity.jsx\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TrackProductivity = () => {\n  const [tasks, setTasks] = useState([]);\n  const [timeLogs, setTimeLogs] = useState({});\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const res = await axios.get('http://localhost:5000/api/tasks', {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setTasks(res.data);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    fetchTasks();\n  }, []);\n\n  const handleLogTime = async (taskId) => {\n    const minutes = prompt('Enter minutes spent on this task:');\n    if (!minutes || isNaN(minutes)) return alert('Enter valid number');\n\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post(\n        `http://localhost:5000/api/tasks/${taskId}/log-time`,\n        { minutes: Number(minutes) },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      alert('Time logged successfully');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-4\">Productivity Analysis</h2>\n      {tasks.map((task) => (\n        <div\n          key={task._id}\n          className=\"bg-white shadow p-4 mb-4 rounded border border-gray-200\"\n        >\n          <h3 className=\"text-xl font-semibold\">{task.title}</h3>\n          <p>{task.description}</p>\n          <button\n            className=\"mt-2 px-4 py-1 bg-blue-600 text-white rounded\"\n            onClick={() => handleLogTime(task._id)}\n          >\n            Log Time\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrackProductivity;*/\n\nimport { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrackProductivity = ({\n  taskId\n}) => {\n  _s();\n  const [isTabActive, setIsTabActive] = useState(true);\n  const [secondsSpent, setSecondsSpent] = useState(0);\n  const timerRef = useRef(null);\n\n  // Function to log time to backend\n  const logTime = async () => {\n    if (secondsSpent > 0) {\n      const minutes = Math.floor(secondsSpent / 60);\n      try {\n        await axios.post(`/api/tasks/${taskId}/log-time`, {\n          minutes\n        });\n        setSecondsSpent(0); // Reset counter\n      } catch (err) {\n        console.error(\"Error logging time:\", err);\n      }\n    }\n  };\n\n  // Start/Stop Timer\n  const startTimer = () => {\n    if (!timerRef.current) {\n      timerRef.current = setInterval(() => {\n        setSecondsSpent(prev => prev + 1);\n      }, 1000);\n    }\n  };\n  const stopTimer = () => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  };\n\n  // Tab visibility handler\n  useEffect(() => {\n    const handleVisibility = () => {\n      const isActive = document.visibilityState === \"visible\";\n      setIsTabActive(isActive);\n      if (isActive) {\n        startTimer();\n      } else {\n        stopTimer();\n        logTime();\n      }\n    };\n    document.addEventListener(\"visibilitychange\", handleVisibility);\n    handleVisibility();\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibility);\n      stopTimer();\n      logTime();\n    };\n  }, [secondsSpent]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-lg font-bold mb-2\",\n      children: [\"Tracking Time for Task ID: \", taskId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", isTabActive ? \"Active\" : \"Inactive\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Session Time: \", Math.floor(secondsSpent / 60), \" min \", secondsSpent % 60, \" sec\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(TrackProductivity, \"I/KEK0265tRN5kcco4M8hccH710=\");\n_c = TrackProductivity;\nexport default TrackProductivity;\nvar _c;\n$RefreshReg$(_c, \"TrackProductivity\");","map":{"version":3,"names":["useEffect","useRef","useState","axios","jsxDEV","_jsxDEV","TrackProductivity","taskId","_s","isTabActive","setIsTabActive","secondsSpent","setSecondsSpent","timerRef","logTime","minutes","Math","floor","post","err","console","error","startTimer","current","setInterval","prev","stopTimer","clearInterval","handleVisibility","isActive","document","visibilityState","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/apiiit123/smart-productivity-tracker/frontend/src/components/Dashboard/TrackProductivity.jsx"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TrackProductivity = () => {\n  const [tasks, setTasks] = useState([]);\n  const [timeLogs, setTimeLogs] = useState({});\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const res = await axios.get('http://localhost:5000/api/tasks', {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setTasks(res.data);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    fetchTasks();\n  }, []);\n\n  const handleLogTime = async (taskId) => {\n    const minutes = prompt('Enter minutes spent on this task:');\n    if (!minutes || isNaN(minutes)) return alert('Enter valid number');\n\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post(\n        `http://localhost:5000/api/tasks/${taskId}/log-time`,\n        { minutes: Number(minutes) },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      alert('Time logged successfully');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-4\">Productivity Analysis</h2>\n      {tasks.map((task) => (\n        <div\n          key={task._id}\n          className=\"bg-white shadow p-4 mb-4 rounded border border-gray-200\"\n        >\n          <h3 className=\"text-xl font-semibold\">{task.title}</h3>\n          <p>{task.description}</p>\n          <button\n            className=\"mt-2 px-4 py-1 bg-blue-600 text-white rounded\"\n            onClick={() => handleLogTime(task._id)}\n          >\n            Log Time\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrackProductivity;*/\n\n\n\nimport { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\n\nconst TrackProductivity= ({ taskId }) => {\n  const [isTabActive, setIsTabActive] = useState(true);\n  const [secondsSpent, setSecondsSpent] = useState(0);\n  const timerRef = useRef(null);\n\n  // Function to log time to backend\n  const logTime = async () => {\n    if (secondsSpent > 0) {\n      const minutes = Math.floor(secondsSpent / 60);\n      try {\n        await axios.post(`/api/tasks/${taskId}/log-time`, { minutes });\n        setSecondsSpent(0); // Reset counter\n      } catch (err) {\n        console.error(\"Error logging time:\", err);\n      }\n    }\n  };\n\n  // Start/Stop Timer\n  const startTimer = () => {\n    if (!timerRef.current) {\n      timerRef.current = setInterval(() => {\n        setSecondsSpent((prev) => prev + 1);\n      }, 1000);\n    }\n  };\n\n  const stopTimer = () => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  };\n\n  // Tab visibility handler\n  useEffect(() => {\n    const handleVisibility = () => {\n      const isActive = document.visibilityState === \"visible\";\n      setIsTabActive(isActive);\n      if (isActive) {\n        startTimer();\n      } else {\n        stopTimer();\n        logTime();\n      }\n    };\n\n    document.addEventListener(\"visibilitychange\", handleVisibility);\n    handleVisibility();\n\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibility);\n      stopTimer();\n      logTime();\n    };\n  }, [secondsSpent]);\n\n  return (\n    <div className=\"p-4\">\n      <h2 className=\"text-lg font-bold mb-2\">Tracking Time for Task ID: {taskId}</h2>\n      <p>Status: {isTabActive ? \"Active\" : \"Inactive\"}</p>\n      <p>Current Session Time: {Math.floor(secondsSpent / 60)} min {secondsSpent % 60} sec</p>\n    </div>\n  );\n};\n\nexport default TrackProductivity;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}