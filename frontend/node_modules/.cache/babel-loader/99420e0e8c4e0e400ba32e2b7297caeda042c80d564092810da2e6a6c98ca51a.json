{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/smart-productivity-tracker/frontend/src/components/Dashboard/SetGoalsandReminders.jsx\",\n  _s = $RefreshSig$();\n// /*import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Line } from 'react-chartjs-2';\n// import { fetchProcrastinationInsights, saveGoalAndReminder } from \"../services/api\";\n// import { Chart as ChartJS, Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale } from 'chart.js';\n// ChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale);\n\n// const SetGoalsAndReminders = ({ token }) => {\n//   const { id: taskId } = useParams(); // ✅ get taskId from URL\n//   console.log('Task ID:', taskId); // Log to check if taskId is correctly fetched\n//   const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n//   const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n//   const [procrastinationData, setProcrastinationData] = useState(null);\n//   const [patterns, setPatterns] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch procrastination insights and productivity patterns from AI\n//     fetchProcrastinationInsights(token)\n//       .then(data => {\n//         setProcrastinationData(data.insights);\n//         setPatterns(data.patterns);\n//       })\n//       .catch(err => console.error('Error fetching insights:', err));\n//   }, [token]);\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     saveGoalAndReminder(taskId, { goal, reminder }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//       })\n//       .catch(err => console.error('Error saving goal and reminder:', err));\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const goalForm = (\n//     <div className=\"goal-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         value={goal.title}\n//         placeholder=\"Goal Title\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         value={goal.description}\n//         placeholder=\"Goal Description\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n//     </div>\n//   );\n\n//   const reminderForm = (\n//     <div className=\"reminder-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//         <option value=\"Custom\">Custom</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n//     </div>\n//   );\n\n//   const procrastinationAnalysis = (\n//     <div className=\"procrastination-analysis\">\n//       <h2 className=\"text-xl font-semibold\">Procrastination Detection</h2>\n//       {procrastinationData && (\n//         <div>\n//           <p>{procrastinationData.alerts}</p>\n//           <div className=\"productivity-chart\">\n//             <Line\n//               data={{\n//                 labels: procrastinationData.dates,\n//                 datasets: [{\n//                   label: 'Time Delayed in Task Completion (hrs)',\n//                   data: procrastinationData.delays,\n//                   borderColor: 'rgba(255, 99, 132, 0.2)',\n//                   backgroundColor: 'rgba(255, 99, 132, 0.5)',\n//                 }]\n//               }}\n//               options={{ responsive: true, plugins: { title: { display: true, text: 'Delays in Task Completion' }}}}\n//             />\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n\n//   const productivityPatterns = (\n//     <div className=\"productivity-patterns\">\n//       <h2 className=\"text-xl font-semibold\">Your Productivity Patterns</h2>\n//       <div>\n//         <ul>\n//           {patterns.map((pattern, idx) => (\n//             <li key={idx}>{pattern}</li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n//       {goalForm}\n//       {reminderForm}\n//       {procrastinationAnalysis}\n//       {productivityPatterns}\n//     </div>\n//   );\n// };\n\n// export default SetGoalsAndReminders;\n// */\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom'; // ✅ Import useParams at the top level\n// import { fetchProcrastinationInsights, saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const { id: taskId } = useParams(); // ✅ Extract taskId from URL params using useParams\n//   console.log('Task ID:', taskId); // Check taskId in console\n\n//   const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n//   const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n\n//   useEffect(() => {\n//     if (taskId) {\n//       // Logic if you need to fetch procrastination insights or something else\n//     } else {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [taskId, token]);\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     // Save the goal and reminder using the task ID\n//     saveGoalAndReminder(taskId, { goal, reminder }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//       })\n//       .catch(err => console.error('Error saving goal and reminder:', err));\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const goalForm = (\n//     <div className=\"goal-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         value={goal.title}\n//         placeholder=\"Goal Title\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         value={goal.description}\n//         placeholder=\"Goal Description\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n//     </div>\n//   );\n\n//   const reminderForm = (\n//     <div className=\"reminder-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//         <option value=\"Custom\">Custom</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n//       {goalForm}\n//       {reminderForm}\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\n\n/*import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom'; \nimport { saveGoalAndReminder } from \"../services/api\";\n\nconst SetGoalsandReminders = ({ token }) => {\n  const location = useLocation(); // Use location hook to get the full URL\n  const [taskId, setTaskId] = useState(null);\n\n  useEffect(() => {\n    // Extract taskId from the URL path\n    const pathSegments = location.pathname.split('/');\n    const idFromUrl = pathSegments[pathSegments.length - 2]; // Should be the taskId\n    setTaskId(idFromUrl);\n\n    console.log('Task ID:', idFromUrl); // Log the task ID to confirm\n\n    if (!idFromUrl) {\n      console.error(\"Task ID is missing from URL.\");\n    }\n  }, [location]);\n\n  const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n  const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n\n  const handleSaveGoalAndReminder = () => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n      return;\n    }\n\n    saveGoalAndReminder(taskId, { goal, reminder }, token)\n      .then(response => {\n        console.log(\"Goal and Reminder saved successfully:\", response);\n      })\n      .catch(err => console.error('Error saving goal and reminder:', err));\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    if (name in goal) {\n      setGoal({ ...goal, [name]: value });\n    } else {\n      setReminder({ ...reminder, [name]: value });\n    }\n  };\n\n  const goalForm = (\n    <div className=\"goal-form\">\n      <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n      <input\n        type=\"text\"\n        name=\"title\"\n        value={goal.title}\n        placeholder=\"Goal Title\"\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <textarea\n        name=\"description\"\n        value={goal.description}\n        placeholder=\"Goal Description\"\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <input\n        type=\"datetime-local\"\n        name=\"dueDate\"\n        value={goal.dueDate}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <select\n        name=\"priority\"\n        value={goal.priority}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Low\">Low</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"High\">High</option>\n      </select>\n      <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n    </div>\n  );\n\n  const reminderForm = (\n    <div className=\"reminder-form\">\n      <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n      <select\n        name=\"frequency\"\n        value={reminder.frequency}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Daily\">Daily</option>\n        <option value=\"Weekly\">Weekly</option>\n        <option value=\"Custom\">Custom</option>\n      </select>\n      <input\n        type=\"time\"\n        name=\"time\"\n        value={reminder.time}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n    </div>\n  );\n\n  return (\n    <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n      {goalForm}\n      {reminderForm}\n    </div>\n  );\n};\n\nexport default SetGoalsandReminders;*/\n\n// import React, { useState, useEffect } from 'react';\n// import { useLocation } from 'react-router-dom'; \n// import { saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const location = useLocation();\n//   const [taskId, setTaskId] = useState(null);\n\n//   useEffect(() => {\n//     const pathSegments = location.pathname.split('/');\n//     const idFromUrl = pathSegments[pathSegments.length - 2]; // Get task ID\n//     setTaskId(idFromUrl);\n\n//     if (!idFromUrl) {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [location]);\n\n//   const [goal, setGoal] = useState({\n//     title: \"\",\n//     description: \"\",\n//     dueDate: \"\",\n//     priority: \"Medium\"\n//   });\n\n//   const [reminder, setReminder] = useState({\n//     frequency: \"Daily\",\n//     time: \"09:00\"\n//   });\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else if (name in reminder) {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     const combinedReminderDateTime = new Date(`${goal.dueDate}T${reminder.time}`);\n\n//     saveGoalAndReminder(taskId, {\n//       goal: `${goal.title} - ${goal.description}`,\n//       reminder: combinedReminderDateTime\n//     }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//         alert(\"Goal and Reminder saved successfully!\");\n//       })\n//       .catch(err => {\n//         console.error('Error saving goal and reminder:', err);\n//         alert(\"Failed to save. Check console.\");\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Set Goal and Reminder</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         placeholder=\"Goal Title\"\n//         value={goal.title}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <textarea\n//         name=\"description\"\n//         placeholder=\"Goal Description\"\n//         value={goal.description}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <input\n//         type=\"date\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <select name=\"priority\" value={goal.priority} onChange={handleInputChange}>\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select><br />\n\n//       <label>Reminder Time: </label>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <button onClick={handleSaveGoalAndReminder}>Save Goal & Reminder</button>\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\n// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import { saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const { id } = useParams(); // this must match \":id\" in your Route path\n//   const navigate = useNavigate();\n\n//   const taskId = id;\n//   console.log(\"Task ID from URL:\", taskId); // Should NOT be undefined\n\n//   const [goal, setGoal] = useState({\n//     title: \"\",\n//     description: \"\",\n//     dueDate: \"\",\n//     priority: \"Medium\"\n//   });\n\n//   const [reminder, setReminder] = useState({\n//     frequency: \"Daily\",\n//     time: \"09:00\"\n//   });\n\n//   useEffect(() => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [taskId]);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else if (name in reminder) {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const handleSaveGoalAndReminder = async () => {\n//     if (!taskId) {\n//       alert(\"Task ID is missing.\");\n//       return;\n//     }\n\n//     const combinedReminderDateTime = `${reminder.frequency} - ${reminder.time}`;\n\n//     try {\n//       const result = await saveGoalAndReminder(taskId, {\n//         goal: `${goal.title} - ${goal.description}`,\n//         reminder: combinedReminderDateTime\n//       }, token);\n\n//       if (result.success) {\n//         alert(result.message);\n//         navigate(`/tasks/${taskId}`); // Go back to view task\n//       } else {\n//         alert(\"Failed to save. Please try again.\");\n//       }\n//     } catch (err) {\n//       console.error(\"Error occurred:\", err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"p-6 max-w-xl mx-auto bg-white shadow-lg rounded-lg\">\n//       <h3 className=\"text-2xl font-bold mb-4\">Set Goal and Reminder</h3>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         placeholder=\"Goal Title\"\n//         value={goal.title}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         placeholder=\"Goal Description\"\n//         value={goal.description}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       />\n//       <input\n//         type=\"date\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n\n//       <h4 className=\"text-xl font-semibold mt-4 mb-2\">Reminder</h4>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-4\"\n//       />\n\n//       <button\n//         onClick={handleSaveGoalAndReminder}\n//         className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n//       >\n//         Save Goal & Reminder\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { saveGoalAndReminder } from \"../services/api\";\nimport '../../styles/SetGoalsandReminders.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SetGoalsandReminders = ({\n  token\n}) => {\n  _s();\n  const {\n    id\n  } = useParams(); // this must match \":id\" in your Route path\n  const navigate = useNavigate();\n  const taskId = id;\n  console.log(\"Task ID from URL:\", taskId); // Should NOT be undefined\n\n  const [goal, setGoal] = useState({\n    title: \"\",\n    description: \"\",\n    dueDate: \"\",\n    priority: \"Medium\"\n  });\n  const [reminder, setReminder] = useState({\n    frequency: \"Daily\",\n    time: \"09:00\"\n  });\n  useEffect(() => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n    }\n  }, [taskId]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name in goal) {\n      setGoal({\n        ...goal,\n        [name]: value\n      });\n    } else if (name in reminder) {\n      setReminder({\n        ...reminder,\n        [name]: value\n      });\n    }\n  };\n  const handleSaveGoalAndReminder = async () => {\n    if (!taskId) {\n      alert(\"Task ID is missing.\");\n      return;\n    }\n    const goalData = {\n      goal: {\n        ...goal,\n        dueDate: goal.dueDate,\n        // if you have dueDate\n        priority: goal.priority // if you have priority\n      },\n      reminder: {\n        frequency: reminder.frequency,\n        time: reminder.time\n      }\n    };\n    try {\n      const response = await saveGoalAndReminder(taskId, goalData, token);\n      console.log(response.message);\n      navigate(\"/tasks\"); // or wherever you want after save\n    } catch (error) {\n      console.error(error.message);\n      alert(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"goals-reminder-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"title\",\n      children: \"Set Goal and Reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"title\",\n      placeholder: \"Goal Title\",\n      value: goal.title,\n      onChange: handleInputChange,\n      className: \"input-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 705,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"description\",\n      placeholder: \"Goal Description\",\n      value: goal.description,\n      onChange: handleInputChange,\n      className: \"input-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      name: \"dueDate\",\n      value: goal.dueDate,\n      onChange: handleInputChange,\n      className: \"input-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"priority\",\n      value: goal.priority,\n      onChange: handleInputChange,\n      className: \"input-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Low\",\n        children: \"Low\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Medium\",\n        children: \"Medium\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"High\",\n        children: \"High\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 727,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"reminder-title\",\n      children: \"Reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"frequency\",\n      value: reminder.frequency,\n      onChange: handleInputChange,\n      className: \"input-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Daily\",\n        children: \"Daily\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Weekly\",\n        children: \"Weekly\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      name: \"time\",\n      value: reminder.time,\n      onChange: handleInputChange,\n      className: \"input-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 748,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveGoalAndReminder,\n      className: \"save-btn\",\n      children: \"Save Goal & Reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 703,\n    columnNumber: 5\n  }, this);\n};\n_s(SetGoalsandReminders, \"svgdOlU4iWFS7Ph4kutH/0Vc+mU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = SetGoalsandReminders;\nexport default SetGoalsandReminders;\nvar _c;\n$RefreshReg$(_c, \"SetGoalsandReminders\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","saveGoalAndReminder","jsxDEV","_jsxDEV","SetGoalsandReminders","token","_s","id","navigate","taskId","console","log","goal","setGoal","title","description","dueDate","priority","reminder","setReminder","frequency","time","error","handleInputChange","e","name","value","target","handleSaveGoalAndReminder","alert","goalData","response","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/home/apiiit123/smart-productivity-tracker/frontend/src/components/Dashboard/SetGoalsandReminders.jsx"],"sourcesContent":["// /*import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { Line } from 'react-chartjs-2';\n// import { fetchProcrastinationInsights, saveGoalAndReminder } from \"../services/api\";\n// import { Chart as ChartJS, Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale } from 'chart.js';\n// ChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale);\n\n// const SetGoalsAndReminders = ({ token }) => {\n//   const { id: taskId } = useParams(); // ✅ get taskId from URL\n//   console.log('Task ID:', taskId); // Log to check if taskId is correctly fetched\n//   const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n//   const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n//   const [procrastinationData, setProcrastinationData] = useState(null);\n//   const [patterns, setPatterns] = useState([]);\n  \n//   useEffect(() => {\n//     // Fetch procrastination insights and productivity patterns from AI\n//     fetchProcrastinationInsights(token)\n//       .then(data => {\n//         setProcrastinationData(data.insights);\n//         setPatterns(data.patterns);\n//       })\n//       .catch(err => console.error('Error fetching insights:', err));\n//   }, [token]);\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n  \n//     saveGoalAndReminder(taskId, { goal, reminder }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//       })\n//       .catch(err => console.error('Error saving goal and reminder:', err));\n//   };\n  \n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const goalForm = (\n//     <div className=\"goal-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         value={goal.title}\n//         placeholder=\"Goal Title\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         value={goal.description}\n//         placeholder=\"Goal Description\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n//     </div>\n//   );\n\n//   const reminderForm = (\n//     <div className=\"reminder-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//         <option value=\"Custom\">Custom</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n//     </div>\n//   );\n\n//   const procrastinationAnalysis = (\n//     <div className=\"procrastination-analysis\">\n//       <h2 className=\"text-xl font-semibold\">Procrastination Detection</h2>\n//       {procrastinationData && (\n//         <div>\n//           <p>{procrastinationData.alerts}</p>\n//           <div className=\"productivity-chart\">\n//             <Line\n//               data={{\n//                 labels: procrastinationData.dates,\n//                 datasets: [{\n//                   label: 'Time Delayed in Task Completion (hrs)',\n//                   data: procrastinationData.delays,\n//                   borderColor: 'rgba(255, 99, 132, 0.2)',\n//                   backgroundColor: 'rgba(255, 99, 132, 0.5)',\n//                 }]\n//               }}\n//               options={{ responsive: true, plugins: { title: { display: true, text: 'Delays in Task Completion' }}}}\n//             />\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n\n//   const productivityPatterns = (\n//     <div className=\"productivity-patterns\">\n//       <h2 className=\"text-xl font-semibold\">Your Productivity Patterns</h2>\n//       <div>\n//         <ul>\n//           {patterns.map((pattern, idx) => (\n//             <li key={idx}>{pattern}</li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n//       {goalForm}\n//       {reminderForm}\n//       {procrastinationAnalysis}\n//       {productivityPatterns}\n//     </div>\n//   );\n// };\n\n// export default SetGoalsAndReminders;\n// */\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom'; // ✅ Import useParams at the top level\n// import { fetchProcrastinationInsights, saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const { id: taskId } = useParams(); // ✅ Extract taskId from URL params using useParams\n//   console.log('Task ID:', taskId); // Check taskId in console\n  \n//   const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n//   const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n\n//   useEffect(() => {\n//     if (taskId) {\n//       // Logic if you need to fetch procrastination insights or something else\n//     } else {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [taskId, token]);\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     // Save the goal and reminder using the task ID\n//     saveGoalAndReminder(taskId, { goal, reminder }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//       })\n//       .catch(err => console.error('Error saving goal and reminder:', err));\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const goalForm = (\n//     <div className=\"goal-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         value={goal.title}\n//         placeholder=\"Goal Title\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         value={goal.description}\n//         placeholder=\"Goal Description\"\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n//     </div>\n//   );\n\n//   const reminderForm = (\n//     <div className=\"reminder-form\">\n//       <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//         <option value=\"Custom\">Custom</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"input-field\"\n//       />\n//       <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n//       {goalForm}\n//       {reminderForm}\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\n\n/*import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom'; \nimport { saveGoalAndReminder } from \"../services/api\";\n\nconst SetGoalsandReminders = ({ token }) => {\n  const location = useLocation(); // Use location hook to get the full URL\n  const [taskId, setTaskId] = useState(null);\n\n  useEffect(() => {\n    // Extract taskId from the URL path\n    const pathSegments = location.pathname.split('/');\n    const idFromUrl = pathSegments[pathSegments.length - 2]; // Should be the taskId\n    setTaskId(idFromUrl);\n\n    console.log('Task ID:', idFromUrl); // Log the task ID to confirm\n\n    if (!idFromUrl) {\n      console.error(\"Task ID is missing from URL.\");\n    }\n  }, [location]);\n\n  const [goal, setGoal] = useState({ title: \"\", description: \"\", dueDate: \"\", priority: \"Medium\" });\n  const [reminder, setReminder] = useState({ frequency: \"Daily\", time: \"09:00 AM\" });\n\n  const handleSaveGoalAndReminder = () => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n      return;\n    }\n\n    saveGoalAndReminder(taskId, { goal, reminder }, token)\n      .then(response => {\n        console.log(\"Goal and Reminder saved successfully:\", response);\n      })\n      .catch(err => console.error('Error saving goal and reminder:', err));\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    if (name in goal) {\n      setGoal({ ...goal, [name]: value });\n    } else {\n      setReminder({ ...reminder, [name]: value });\n    }\n  };\n\n  const goalForm = (\n    <div className=\"goal-form\">\n      <h2 className=\"text-xl font-semibold\">Set Your Productivity Goal</h2>\n      <input\n        type=\"text\"\n        name=\"title\"\n        value={goal.title}\n        placeholder=\"Goal Title\"\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <textarea\n        name=\"description\"\n        value={goal.description}\n        placeholder=\"Goal Description\"\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <input\n        type=\"datetime-local\"\n        name=\"dueDate\"\n        value={goal.dueDate}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <select\n        name=\"priority\"\n        value={goal.priority}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Low\">Low</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"High\">High</option>\n      </select>\n      <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Goal</button>\n    </div>\n  );\n\n  const reminderForm = (\n    <div className=\"reminder-form\">\n      <h2 className=\"text-xl font-semibold\">Set Reminder Frequency</h2>\n      <select\n        name=\"frequency\"\n        value={reminder.frequency}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Daily\">Daily</option>\n        <option value=\"Weekly\">Weekly</option>\n        <option value=\"Custom\">Custom</option>\n      </select>\n      <input\n        type=\"time\"\n        name=\"time\"\n        value={reminder.time}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <button onClick={handleSaveGoalAndReminder} className=\"save-btn\">Save Reminder</button>\n    </div>\n  );\n\n  return (\n    <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-6\">\n      {goalForm}\n      {reminderForm}\n    </div>\n  );\n};\n\nexport default SetGoalsandReminders;*/\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useLocation } from 'react-router-dom'; \n// import { saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const location = useLocation();\n//   const [taskId, setTaskId] = useState(null);\n\n//   useEffect(() => {\n//     const pathSegments = location.pathname.split('/');\n//     const idFromUrl = pathSegments[pathSegments.length - 2]; // Get task ID\n//     setTaskId(idFromUrl);\n\n//     if (!idFromUrl) {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [location]);\n\n//   const [goal, setGoal] = useState({\n//     title: \"\",\n//     description: \"\",\n//     dueDate: \"\",\n//     priority: \"Medium\"\n//   });\n\n//   const [reminder, setReminder] = useState({\n//     frequency: \"Daily\",\n//     time: \"09:00\"\n//   });\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else if (name in reminder) {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const handleSaveGoalAndReminder = () => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//       return;\n//     }\n\n//     const combinedReminderDateTime = new Date(`${goal.dueDate}T${reminder.time}`);\n\n//     saveGoalAndReminder(taskId, {\n//       goal: `${goal.title} - ${goal.description}`,\n//       reminder: combinedReminderDateTime\n//     }, token)\n//       .then(response => {\n//         console.log(\"Goal and Reminder saved successfully:\", response);\n//         alert(\"Goal and Reminder saved successfully!\");\n//       })\n//       .catch(err => {\n//         console.error('Error saving goal and reminder:', err);\n//         alert(\"Failed to save. Check console.\");\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Set Goal and Reminder</h2>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         placeholder=\"Goal Title\"\n//         value={goal.title}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <textarea\n//         name=\"description\"\n//         placeholder=\"Goal Description\"\n//         value={goal.description}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <input\n//         type=\"date\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <select name=\"priority\" value={goal.priority} onChange={handleInputChange}>\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select><br />\n\n//       <label>Reminder Time: </label>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//       /><br />\n\n//       <button onClick={handleSaveGoalAndReminder}>Save Goal & Reminder</button>\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\n// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import { saveGoalAndReminder } from \"../services/api\";\n\n// const SetGoalsandReminders = ({ token }) => {\n//   const { id } = useParams(); // this must match \":id\" in your Route path\n//   const navigate = useNavigate();\n\n//   const taskId = id;\n//   console.log(\"Task ID from URL:\", taskId); // Should NOT be undefined\n\n//   const [goal, setGoal] = useState({\n//     title: \"\",\n//     description: \"\",\n//     dueDate: \"\",\n//     priority: \"Medium\"\n//   });\n\n//   const [reminder, setReminder] = useState({\n//     frequency: \"Daily\",\n//     time: \"09:00\"\n//   });\n\n//   useEffect(() => {\n//     if (!taskId) {\n//       console.error(\"Task ID is missing from URL.\");\n//     }\n//   }, [taskId]);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     if (name in goal) {\n//       setGoal({ ...goal, [name]: value });\n//     } else if (name in reminder) {\n//       setReminder({ ...reminder, [name]: value });\n//     }\n//   };\n\n//   const handleSaveGoalAndReminder = async () => {\n//     if (!taskId) {\n//       alert(\"Task ID is missing.\");\n//       return;\n//     }\n\n//     const combinedReminderDateTime = `${reminder.frequency} - ${reminder.time}`;\n\n//     try {\n//       const result = await saveGoalAndReminder(taskId, {\n//         goal: `${goal.title} - ${goal.description}`,\n//         reminder: combinedReminderDateTime\n//       }, token);\n\n//       if (result.success) {\n//         alert(result.message);\n//         navigate(`/tasks/${taskId}`); // Go back to view task\n//       } else {\n//         alert(\"Failed to save. Please try again.\");\n//       }\n//     } catch (err) {\n//       console.error(\"Error occurred:\", err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"p-6 max-w-xl mx-auto bg-white shadow-lg rounded-lg\">\n//       <h3 className=\"text-2xl font-bold mb-4\">Set Goal and Reminder</h3>\n//       <input\n//         type=\"text\"\n//         name=\"title\"\n//         placeholder=\"Goal Title\"\n//         value={goal.title}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       />\n//       <textarea\n//         name=\"description\"\n//         placeholder=\"Goal Description\"\n//         value={goal.description}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       />\n//       <input\n//         type=\"date\"\n//         name=\"dueDate\"\n//         value={goal.dueDate}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       />\n//       <select\n//         name=\"priority\"\n//         value={goal.priority}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n\n//       <h4 className=\"text-xl font-semibold mt-4 mb-2\">Reminder</h4>\n//       <select\n//         name=\"frequency\"\n//         value={reminder.frequency}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-2\"\n//       >\n//         <option value=\"Daily\">Daily</option>\n//         <option value=\"Weekly\">Weekly</option>\n//       </select>\n//       <input\n//         type=\"time\"\n//         name=\"time\"\n//         value={reminder.time}\n//         onChange={handleInputChange}\n//         className=\"border p-2 w-full mb-4\"\n//       />\n\n//       <button\n//         onClick={handleSaveGoalAndReminder}\n//         className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n//       >\n//         Save Goal & Reminder\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default SetGoalsandReminders;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { saveGoalAndReminder } from \"../services/api\";\nimport '../../styles/SetGoalsandReminders.css';\nconst SetGoalsandReminders = ({ token }) => {\n  const { id } = useParams(); // this must match \":id\" in your Route path\n  const navigate = useNavigate();\n\n  const taskId = id;\n  console.log(\"Task ID from URL:\", taskId); // Should NOT be undefined\n\n  const [goal, setGoal] = useState({\n    title: \"\",\n    description: \"\",\n    dueDate: \"\",\n    priority: \"Medium\"\n  });\n\n  const [reminder, setReminder] = useState({\n    frequency: \"Daily\",\n    time: \"09:00\"\n  });\n\n  useEffect(() => {\n    if (!taskId) {\n      console.error(\"Task ID is missing from URL.\");\n    }\n  }, [taskId]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    if (name in goal) {\n      setGoal({ ...goal, [name]: value });\n    } else if (name in reminder) {\n      setReminder({ ...reminder, [name]: value });\n    }\n  };\n\n \n  const handleSaveGoalAndReminder = async () => {\n    if (!taskId) {\n      alert(\"Task ID is missing.\");\n      return;\n    }\n  \n    const goalData = {\n      goal: {\n        ...goal,\n        dueDate: goal.dueDate,  // if you have dueDate\n        priority: goal.priority // if you have priority\n      },\n      reminder: {\n        frequency: reminder.frequency,\n        time: reminder.time\n      }\n    };\n  \n    try {\n      const response = await saveGoalAndReminder(taskId, goalData, token);\n      console.log(response.message);\n      navigate(\"/tasks\");  // or wherever you want after save\n    } catch (error) {\n      console.error(error.message);\n      alert(error.message);\n    }\n  };\n  \n  return (\n    <div className=\"goals-reminder-container\">\n      <h3 className=\"title\">Set Goal and Reminder</h3>\n      <input\n        type=\"text\"\n        name=\"title\"\n        placeholder=\"Goal Title\"\n        value={goal.title}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <textarea\n        name=\"description\"\n        placeholder=\"Goal Description\"\n        value={goal.description}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <input\n        type=\"date\"\n        name=\"dueDate\"\n        value={goal.dueDate}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n      <select\n        name=\"priority\"\n        value={goal.priority}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Low\">Low</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"High\">High</option>\n      </select>\n\n      <h4 className=\"reminder-title\">Reminder</h4>\n      <select\n        name=\"frequency\"\n        value={reminder.frequency}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      >\n        <option value=\"Daily\">Daily</option>\n        <option value=\"Weekly\">Weekly</option>\n      </select>\n      <input\n        type=\"time\"\n        name=\"time\"\n        value={reminder.time}\n        onChange={handleInputChange}\n        className=\"input-field\"\n      />\n\n      <button\n        onClick={handleSaveGoalAndReminder}\n        className=\"save-btn\"\n      >\n        Save Goal & Reminder\n      </button>\n    </div>\n  );\n};\n\nexport default SetGoalsandReminders;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}