{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/smart-productivity-tracker/frontend/src/components/admin/GenerateReports.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport jsPDF from 'jspdf';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GenerateReports = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [dateRange, setDateRange] = useState({\n    start: '',\n    end: ''\n  });\n  const [selectedUser, setSelectedUser] = useState('');\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetching users and tasks for report generation\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/admin/users').then(res => {\n      setUsers(res.data); // Assuming response contains user data\n    });\n    axios.get('http://localhost:5000/api/admin/tasks').then(res => {\n      setTasks(res.data); // Assuming response contains tasks data\n    });\n  }, []);\n  const handleGenerateReport = () => {\n    if (!selectedUser || !dateRange.start || !dateRange.end) {\n      alert(\"Please select a user and date range\");\n      return;\n    }\n    const filters = {\n      userId: selectedUser,\n      startDate: dateRange.start,\n      endDate: dateRange.end\n    };\n    setLoading(true);\n    axios.post('http://localhost:5000/api/admin/generate-report', filters).then(res => {\n      setReportData(res.data);\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Error generating report:\", err);\n      setLoading(false);\n    });\n  };\n  const handleDownloadPDF = () => {\n    const doc = new jsPDF();\n    doc.text('User Performance Report', 20, 20);\n    doc.autoTable({\n      html: '#report-table'\n    });\n    doc.save('performance_report.pdf');\n  };\n  const handleDownloadCSV = () => {\n    const rows = reportData.map(row => [row.userName, row.category, row.status, row.totalHours, row.taskCount]);\n    const csvContent = 'data:text/csv;charset=utf-8,' + ['UserName,Category,Status,Total Hours,Task Count'].join(',') + '\\n' + rows.map(row => row.join(',')).join('\\n');\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    saveAs(blob, 'performance_report.csv');\n  };\n  const columns = React.useMemo(() => [{\n    Header: 'User Name',\n    accessor: 'userName'\n  }, {\n    Header: 'Category',\n    accessor: 'category'\n  }, {\n    Header: 'Status',\n    accessor: 'status'\n  }, {\n    Header: 'Total Hours',\n    accessor: 'totalHours'\n  }, {\n    Header: 'Task Count',\n    accessor: 'taskCount'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data: reportData\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Generate Reports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedUser,\n        onChange: e => setSelectedUser(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: user._id,\n          children: user.name\n        }, user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Date Range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: dateRange.start,\n        onChange: e => setDateRange({\n          ...dateRange,\n          start: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: dateRange.end,\n        onChange: e => setDateRange({\n          ...dateRange,\n          end: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateReport,\n        className: \"bg-blue-500 text-white p-2 rounded\",\n        disabled: loading,\n        children: loading ? 'Generating Report...' : 'Generate Report'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"report-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        ...getTableProps(),\n        id: \"report-table\",\n        className: \"min-w-full mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n              ...column.getHeaderProps(),\n              children: column.render('Header')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          ...getTableBodyProps(),\n          children: rows.map(row => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  ...cell.getCellProps(),\n                  children: cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 30\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDownloadPDF,\n        className: \"bg-green-600 text-white p-2 rounded mt-4\",\n        children: \"Download as PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDownloadCSV,\n        className: \"bg-green-600 text-white p-2 rounded mt-4 ml-4\",\n        children: \"Download as CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(GenerateReports, \"8vR+y7nRZo5RKHT3AYAaK9TwiOA=\", false, function () {\n  return [useTable];\n});\n_c = GenerateReports;\nexport default GenerateReports;\n\n/*\n// frontend/src/pages/GenerateReports.jsx\n// src/pages/GenerateReports.jsx\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst GenerateReports = () => {\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchReport = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:5000/api/admin/generate-report\");\n        setReportData(res.data);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Failed to fetch report:\", err);\n        setLoading(false);\n      }\n    };\n\n    fetchReport();\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">Detailed User Performance Report</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full border border-gray-200\">\n            <thead>\n              <tr className=\"bg-gray-100 text-left\">\n                <th className=\"p-2 border\">Username</th>\n                <th className=\"p-2 border\">Category</th>\n                <th className=\"p-2 border\">Status</th>\n                <th className=\"p-2 border\">Total Hours</th>\n                <th className=\"p-2 border\">Task Count</th>\n              </tr>\n            </thead>\n            <tbody>\n              {reportData.map((item, index) => (\n                <tr key={index} className=\"hover:bg-gray-50\">\n                  <td className=\"p-2 border\">{item.userName}</td>\n                  <td className=\"p-2 border\">{item.category}</td>\n                  <td className=\"p-2 border\">{item.status}</td>\n                  <td className=\"p-2 border\">{item.totalHours}</td>\n                  <td className=\"p-2 border\">{item.taskCount}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GenerateReports;\n*/\nvar _c;\n$RefreshReg$(_c, \"GenerateReports\");","map":{"version":3,"names":["React","useState","useEffect","axios","useTable","jsPDF","saveAs","jsxDEV","_jsxDEV","GenerateReports","_s","users","setUsers","tasks","setTasks","dateRange","setDateRange","start","end","selectedUser","setSelectedUser","reportData","setReportData","loading","setLoading","get","then","res","data","handleGenerateReport","alert","filters","userId","startDate","endDate","post","catch","err","console","error","handleDownloadPDF","doc","text","autoTable","html","save","handleDownloadCSV","rows","map","row","userName","category","status","totalHours","taskCount","csvContent","join","blob","Blob","type","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","prepareRow","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","user","_id","name","onClick","disabled","id","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","_c","$RefreshReg$"],"sources":["/home/apiiit123/smart-productivity-tracker/frontend/src/components/admin/GenerateReports.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport jsPDF from 'jspdf';\nimport { saveAs } from 'file-saver';\n\nconst GenerateReports = () => {\n  const [users, setUsers] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [dateRange, setDateRange] = useState({ start: '', end: '' });\n  const [selectedUser, setSelectedUser] = useState('');\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetching users and tasks for report generation\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/admin/users').then((res) => {\n      setUsers(res.data);  // Assuming response contains user data\n    });\n\n    axios.get('http://localhost:5000/api/admin/tasks').then((res) => {\n      setTasks(res.data);  // Assuming response contains tasks data\n    });\n  }, []);\n\n  const handleGenerateReport = () => {\n    if (!selectedUser || !dateRange.start || !dateRange.end) {\n      alert(\"Please select a user and date range\");\n      return;\n    }\n\n    const filters = {\n      userId: selectedUser,\n      startDate: dateRange.start,\n      endDate: dateRange.end,\n    };\n\n    setLoading(true);\n    axios.post('http://localhost:5000/api/admin/generate-report', filters)\n      .then((res) => {\n        setReportData(res.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.error(\"Error generating report:\", err);\n        setLoading(false);\n      });\n  };\n\n  const handleDownloadPDF = () => {\n    const doc = new jsPDF();\n    doc.text('User Performance Report', 20, 20);\n    doc.autoTable({ html: '#report-table' });\n    doc.save('performance_report.pdf');\n  };\n\n  const handleDownloadCSV = () => {\n    const rows = reportData.map((row) => [\n      row.userName,\n      row.category,\n      row.status,\n      row.totalHours,\n      row.taskCount,\n    ]);\n\n    const csvContent = 'data:text/csv;charset=utf-8,'\n      + ['UserName,Category,Status,Total Hours,Task Count'].join(',') + '\\n'\n      + rows.map((row) => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, 'performance_report.csv');\n  };\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'User Name',\n      accessor: 'userName',\n    },\n    {\n      Header: 'Category',\n      accessor: 'category',\n    },\n    {\n      Header: 'Status',\n      accessor: 'status',\n    },\n    {\n      Header: 'Total Hours',\n      accessor: 'totalHours',\n    },\n    {\n      Header: 'Task Count',\n      accessor: 'taskCount',\n    },\n  ], []);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data: reportData });\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"text-2xl font-bold mb-4\">Generate Reports</h2>\n\n      <div className=\"filters\">\n        <label>User</label>\n        <select\n          value={selectedUser}\n          onChange={(e) => setSelectedUser(e.target.value)}\n        >\n          <option value=\"\">Select User</option>\n          {users.map((user) => (\n            <option key={user._id} value={user._id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        <label>Date Range</label>\n        <input\n          type=\"date\"\n          value={dateRange.start}\n          onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}\n        />\n        <input\n          type=\"date\"\n          value={dateRange.end}\n          onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}\n        />\n\n        <button\n          onClick={handleGenerateReport}\n          className=\"bg-blue-500 text-white p-2 rounded\"\n          disabled={loading}\n        >\n          {loading ? 'Generating Report...' : 'Generate Report'}\n        </button>\n      </div>\n\n      {loading ? (\n        <div className=\"loading\">Loading...</div>\n      ) : (\n        <div className=\"report-table\">\n          <table {...getTableProps()} id=\"report-table\" className=\"min-w-full mt-6\">\n            <thead>\n              {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map(column => (\n                    <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map(row => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map(cell => {\n                      return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n\n          <button\n            onClick={handleDownloadPDF}\n            className=\"bg-green-600 text-white p-2 rounded mt-4\"\n          >\n            Download as PDF\n          </button>\n\n          <button\n            onClick={handleDownloadCSV}\n            className=\"bg-green-600 text-white p-2 rounded mt-4 ml-4\"\n          >\n            Download as CSV\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GenerateReports;\n\n\n/*\n// frontend/src/pages/GenerateReports.jsx\n// src/pages/GenerateReports.jsx\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst GenerateReports = () => {\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchReport = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:5000/api/admin/generate-report\");\n        setReportData(res.data);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Failed to fetch report:\", err);\n        setLoading(false);\n      }\n    };\n\n    fetchReport();\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">Detailed User Performance Report</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full border border-gray-200\">\n            <thead>\n              <tr className=\"bg-gray-100 text-left\">\n                <th className=\"p-2 border\">Username</th>\n                <th className=\"p-2 border\">Category</th>\n                <th className=\"p-2 border\">Status</th>\n                <th className=\"p-2 border\">Total Hours</th>\n                <th className=\"p-2 border\">Task Count</th>\n              </tr>\n            </thead>\n            <tbody>\n              {reportData.map((item, index) => (\n                <tr key={index} className=\"hover:bg-gray-50\">\n                  <td className=\"p-2 border\">{item.userName}</td>\n                  <td className=\"p-2 border\">{item.category}</td>\n                  <td className=\"p-2 border\">{item.status}</td>\n                  <td className=\"p-2 border\">{item.totalHours}</td>\n                  <td className=\"p-2 border\">{item.taskCount}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GenerateReports;\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}