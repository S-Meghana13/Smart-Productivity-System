{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/smart-productivity-tracker/frontend/src/components/Dashboard/TrackProductivity.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrackProductivity = ({\n  taskId,\n  status\n}) => {\n  _s();\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(true);\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    if (isActive) {\n      intervalRef.current = setInterval(() => {\n        setSeconds(prev => prev + 1);\n      }, 1000);\n    }\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        setIsActive(false);\n        clearInterval(intervalRef.current);\n      } else {\n        setIsActive(true);\n      }\n    };\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    return () => {\n      clearInterval(intervalRef.current);\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, [isActive]);\n  const stopAndLogTime = async () => {\n    clearInterval(intervalRef.current);\n    const minutes = Math.floor(seconds / 60);\n    if (minutes > 0) {\n      try {\n        await axios.post(`/api/tasks/${taskId}/log-time`, {\n          minutes\n        }, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        });\n        alert(`Successfully logged ${minutes} minutes to the task!`);\n      } catch (error) {\n        console.error(\"Error logging time:\", error);\n        alert(\"Failed to log time.\");\n      }\n    }\n    setSeconds(0); // Reset after logging\n  };\n  const formatTime = () => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins} min ${secs} se`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Tracking Time for Task ID: \", taskId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Session Time: \", formatTime()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopAndLogTime,\n      children: \"Stop & Log Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(TrackProductivity, \"+t7TP3TtS5JXGw/WkW3rrntL5jA=\");\n_c = TrackProductivity;\nexport default TrackProductivity;\nvar _c;\n$RefreshReg$(_c, \"TrackProductivity\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","jsxDEV","_jsxDEV","TrackProductivity","taskId","status","_s","seconds","setSeconds","isActive","setIsActive","intervalRef","current","setInterval","prev","handleVisibilityChange","document","hidden","clearInterval","addEventListener","removeEventListener","stopAndLogTime","minutes","Math","floor","post","headers","Authorization","localStorage","getItem","alert","error","console","formatTime","mins","secs","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/apiiit123/smart-productivity-tracker/frontend/src/components/Dashboard/TrackProductivity.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\n\nconst TrackProductivity = ({ taskId, status }) => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(true);\n  const intervalRef = useRef(null);\n\n  useEffect(() => {\n    if (isActive) {\n      intervalRef.current = setInterval(() => {\n        setSeconds((prev) => prev + 1);\n      }, 1000);\n    }\n\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        setIsActive(false);\n        clearInterval(intervalRef.current);\n      } else {\n        setIsActive(true);\n      }\n    };\n\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n    return () => {\n      clearInterval(intervalRef.current);\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, [isActive]);\n\n  const stopAndLogTime = async () => {\n    clearInterval(intervalRef.current);\n    const minutes = Math.floor(seconds / 60);\n\n    if (minutes > 0) {\n      try {\n        await axios.post(`/api/tasks/${taskId}/log-time`, \n          { minutes },\n          {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            },\n          });\n        alert(`Successfully logged ${minutes} minutes to the task!`);\n      } catch (error) {\n        console.error(\"Error logging time:\", error);\n        alert(\"Failed to log time.\");\n      }\n    }\n\n    setSeconds(0); // Reset after logging\n  };\n\n  const formatTime = () => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins} min ${secs} se`;\n  };\n\n  return (\n    <div>\n      <h3>Tracking Time for Task ID: {taskId}</h3>\n      <p>Status: {status}</p>\n      <p>Current Session Time: {formatTime()}</p>\n      <button onClick={stopAndLogTime}>Stop & Log Time</button>\n    </div>\n  );\n};\n\nexport default TrackProductivity;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}